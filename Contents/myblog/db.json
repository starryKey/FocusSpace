{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/snippet02.png","path":"images/snippet02.png","modified":1,"renderable":0},{"_id":"source/images/snippet06.png","path":"images/snippet06.png","modified":1,"renderable":0},{"_id":"source/images/timg.png","path":"images/timg.png","modified":1,"renderable":0},{"_id":"source/images/snippet01.png","path":"images/snippet01.png","modified":1,"renderable":0},{"_id":"source/images/snippet04.png","path":"images/snippet04.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","path":"lib/font-awesome/webfonts/fa-regular-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","path":"lib/font-awesome/css/all.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","path":"lib/font-awesome/webfonts/fa-brands-400.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","path":"lib/font-awesome/webfonts/fa-solid-900.woff2","modified":1,"renderable":1},{"_id":"source/images/snippet05.png","path":"images/snippet05.png","modified":1,"renderable":0},{"_id":"source/images/snippet03.png","path":"images/snippet03.png","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.JPG","path":"images/avatar.JPG","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"28d7191d69b25442b946ba0b3363c739f808ce73","modified":1599965796118},{"_id":"themes/next/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1599750566959},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1597418954929},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1597418954929},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1597418954929},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1597418954933},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1597418954933},{"_id":"themes/next/README.md","hash":"9b4b7d66aca47f9c65d6321b14eef48d95c4dff1","modified":1597418954933},{"_id":"themes/next/.travis.yml","hash":"ecca3b919a5b15886e3eca58aa84aafc395590da","modified":1597418954933},{"_id":"themes/next/_config.yml","hash":"8d27c710d12b36ab4fcf7d40db3c745b78a481e1","modified":1598767776159},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1597418954934},{"_id":"themes/next/gulpfile.js","hash":"1b4fc262b89948937b9e3794de812a7c1f2f3592","modified":1597418954940},{"_id":"themes/next/package.json","hash":"62fad6de02adbbba9fb096cbe2dcc15fe25f2435","modified":1597418954974},{"_id":"source/_posts/Xcode小技巧之Snippets.md","hash":"5c563f935fa7e9934c760a9efd6b330d28cd62a2","modified":1599965754781},{"_id":"source/_posts/hello-world.md","hash":"c0050c84609dc959840c316adfd5814d69970741","modified":1557402686000},{"_id":"source/_posts/时间复杂度.md","hash":"c569f22fdc2936249859005e036acfc7d54ad65e","modified":1598163409467},{"_id":"source/_posts/focus.md","hash":"9fcaabdd65c213d6151580862efaf55bb698f517","modified":1557403279000},{"_id":"source/_posts/数据结构与算法.md","hash":"49383df8ea7adf53a574dd4fd233b3cc84e0a71e","modified":1599402341522},{"_id":"source/categories/index.md","hash":"9e4cb3fc924d18a28b115dc765bc53470ead3687","modified":1598161632472},{"_id":"source/about/index.md","hash":"befccc475dfeb18813d7c10da7eecadc4beb5b75","modified":1557403951000},{"_id":"source/favorite/index.md","hash":"76988edbd60b75328056e2fdde33269b5c9ad01f","modified":1557401865000},{"_id":"source/categories/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557406045000},{"_id":"source/about/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557406004000},{"_id":"source/favorite/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557405971000},{"_id":"source/home/index.md","hash":"72ee1370898ae958b0703f159c9e328f968480fe","modified":1594656072301},{"_id":"source/images/snippet02.png","hash":"649b643b48a46f4027b48c56aa78fc56b5682cd8","modified":1599753251458},{"_id":"source/images/snippet06.png","hash":"6eea0bc6a95e034b654cf9572530b6644fe28178","modified":1599754611841},{"_id":"source/markdown/Markdown语法.md","hash":"4a10ca0c7f741ce5b9234962d88d5ea3953f2036","modified":1557567311000},{"_id":"source/images/timg.png","hash":"bb9df79e90dafda1ec956a260b463c4a70bb7a7e","modified":1598159666831},{"_id":"source/tags/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1557405766000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"aa4cb7aff595ca628cb58160ee1eee117989ec4e","modified":1597418954929},{"_id":"source/tags/index.md","hash":"9b1c1bf53eaa01757eb340c07e60808012144a3c","modified":1598163381436},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"e554931b98f251fd49ff1d2443006d9ea2c20461","modified":1597418954930},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"1a435c20ae8fa183d49bbf96ac956f7c6c25c8af","modified":1597418954931},{"_id":"themes/next/.github/config.yml","hash":"1d3f4e8794986817c0fead095c74f756d45f91ed","modified":1597418954931},{"_id":"themes/next/.github/issue-close-app.yml","hash":"7cba457eec47dbfcfd4086acd1c69eaafca2f0cd","modified":1597418954931},{"_id":"themes/next/.github/lock.yml","hash":"61173b9522ebac13db2c544e138808295624f7fd","modified":1597418954931},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1597418954931},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1597418954932},{"_id":"themes/next/.github/release-drafter.yml","hash":"3cc10ce75ecc03a5ce86b00363e2a17eb65d15ea","modified":1597418954932},{"_id":"themes/next/.github/stale.yml","hash":"fdf82de9284f8bc8e0b0712b4cc1cb081a94de59","modified":1597418954932},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1597418954932},{"_id":"themes/next/docs/AUTHORS.md","hash":"10135a2f78ac40e9f46b3add3e360c025400752f","modified":1597418954935},{"_id":"themes/next/docs/DATA-FILES.md","hash":"cddbdc91ee9e65c37a50bec12194f93d36161616","modified":1597418954935},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"c7a994b9542040317d8f99affa1405c143a94a38","modified":1597418954935},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1597418954934},{"_id":"themes/next/docs/INSTALLATION.md","hash":"af88bcce035780aaa061261ed9d0d6c697678618","modified":1597418954935},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"94dc3404ccb0e5f663af2aa883c1af1d6eae553d","modified":1597418954935},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1597418954936},{"_id":"themes/next/docs/MATH.md","hash":"d645b025ec7fb9fbf799b9bb76af33b9f5b9ed93","modified":1597418954936},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"8b6e4b2c9cfcb969833092bdeaed78534082e3e6","modified":1597418954936},{"_id":"themes/next/languages/ar.yml","hash":"9815e84e53d750c8bcbd9193c2d44d8d910e3444","modified":1597418954941},{"_id":"themes/next/languages/de.yml","hash":"74c59f2744217003b717b59d96e275b54635abf5","modified":1597418954941},{"_id":"themes/next/languages/en.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1597418954941},{"_id":"themes/next/languages/default.yml","hash":"45bc5118828bdc72dcaa25282cd367c8622758cb","modified":1597418954941},{"_id":"themes/next/languages/es.yml","hash":"c64cf05f356096f1464b4b1439da3c6c9b941062","modified":1597418954942},{"_id":"themes/next/languages/hu.yml","hash":"b1ebb77a5fd101195b79f94de293bcf9001d996f","modified":1597418954943},{"_id":"themes/next/languages/fa.yml","hash":"3676b32fda37e122f3c1a655085a1868fb6ad66b","modified":1597418954942},{"_id":"themes/next/languages/fr.yml","hash":"752bf309f46a2cd43890b82300b342d7218d625f","modified":1597418954942},{"_id":"themes/next/languages/it.yml","hash":"44759f779ce9c260b895532de1d209ad4bd144bf","modified":1597418954943},{"_id":"themes/next/languages/id.yml","hash":"572ed855d47aafe26f58c73b1394530754881ec2","modified":1597418954943},{"_id":"themes/next/languages/ja.yml","hash":"0cf0baa663d530f22ff380a051881216d6adcdd8","modified":1597418954944},{"_id":"themes/next/languages/ko.yml","hash":"0feea9e43cd399f3610b94d755a39fff1d371e97","modified":1597418954944},{"_id":"themes/next/languages/nl.yml","hash":"5af3473d9f22897204afabc08bb984b247493330","modified":1597418954944},{"_id":"themes/next/languages/pt-BR.yml","hash":"67555b1ba31a0242b12fc6ce3add28531160e35b","modified":1597418954945},{"_id":"themes/next/languages/pt.yml","hash":"718d131f42f214842337776e1eaddd1e9a584054","modified":1597418954945},{"_id":"themes/next/languages/ru.yml","hash":"e993d5ca072f7f6887e30fc0c19b4da791ca7a88","modified":1597418954945},{"_id":"themes/next/languages/tr.yml","hash":"fe793f4c2608e3f85f0b872fd0ac1fb93e6155e2","modified":1597418954946},{"_id":"themes/next/languages/uk.yml","hash":"3a6d635b1035423b22fc86d9455dba9003724de9","modified":1597418954946},{"_id":"themes/next/languages/vi.yml","hash":"93393b01df148dcbf0863f6eee8e404e2d94ef9e","modified":1597418954946},{"_id":"themes/next/languages/zh-CN.yml","hash":"a1f15571ee7e1e84e3cc0985c3ec4ba1a113f6f8","modified":1597418954947},{"_id":"themes/next/languages/zh-HK.yml","hash":"3789f94010f948e9f23e21235ef422a191753c65","modified":1597418954947},{"_id":"themes/next/languages/zh-TW.yml","hash":"8c09da7c4ec3fca2c6ee897b2eea260596a2baa1","modified":1597418954947},{"_id":"themes/next/layout/_layout.swig","hash":"6a6e92a4664cdb981890a27ac11fd057f44de1d5","modified":1597418954948},{"_id":"themes/next/layout/category.swig","hash":"1bde61cf4d2d171647311a0ac2c5c7933f6a53b0","modified":1597418954972},{"_id":"themes/next/layout/page.swig","hash":"db581bdeac5c75fabb0f17d7c5e746e47f2a9168","modified":1597418954973},{"_id":"themes/next/layout/archive.swig","hash":"e4e31317a8df68f23156cfc49e9b1aa9a12ad2ed","modified":1597418954972},{"_id":"themes/next/layout/index.swig","hash":"7f403a18a68e6d662ae3e154b2c1d3bbe0801a23","modified":1597418954972},{"_id":"themes/next/scripts/renderer.js","hash":"49a65df2028a1bc24814dc72fa50d52231ca4f05","modified":1597418954983},{"_id":"themes/next/layout/tag.swig","hash":"0dfb653bd5de980426d55a0606d1ab122bd8c017","modified":1597418954974},{"_id":"themes/next/layout/post.swig","hash":"2f6d992ced7e067521fdce05ffe4fd75481f41c5","modified":1597418954973},{"_id":"source/images/snippet01.png","hash":"28d0902eaa5d04d41cac35d172dca3034ecefaa8","modified":1599751924843},{"_id":"source/images/snippet04.png","hash":"435866f5b9d4d8ccc14dc69b9fb24388aa0fc254","modified":1599753819492},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c3e6b8196c983c40fd140bdeca012d03e6e86967","modified":1597418954930},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"53df7d537e26aaf062d70d86835c5fd8f81412f3","modified":1597418954931},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"d3efc0df0275c98440e69476f733097916a2d579","modified":1597418954930},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"12d99fb8b62bd9e34d9672f306c9ae4ace7e053e","modified":1597418954930},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"0bd2d696f62a997a11a7d84fec0130122234174e","modified":1597418954936},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"5237a368ab99123749d724b6c379415f2c142a96","modified":1597418954937},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"9c4fe2873123bf9ceacab5c50d17d8a0f1baef27","modified":1597418954936},{"_id":"themes/next/docs/ru/README.md","hash":"85dd68ed1250897a8e4a444a53a68c1d49eb7e11","modified":1597418954937},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"34b88784ec120dfdc20fa82aadeb5f64ef614d14","modified":1597418954937},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"fb23b85db6f7d8279d73ae1f41631f92f64fc864","modified":1597418954938},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"d3f03be036b75dc71cf3c366cd75aee7c127c874","modified":1597418954938},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"ca1030efdfca5e20f9db2e7a428998e66a24c0d0","modified":1597418954938},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8b18f84503a361fc712b0fe4d4568e2f086ca97d","modified":1597418954939},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"579c7bd8341873fb8be4732476d412814f1a3df7","modified":1597418954939},{"_id":"themes/next/docs/zh-CN/README.md","hash":"c038629ff8f3f24e8593c4c8ecf0bef3a35c750d","modified":1597418954939},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b92585d251f1f9ebe401abb5d932cb920f9b8b10","modified":1597418954939},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"d9ce7331c1236bbe0a551d56cef2405e47e65325","modified":1597418954940},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"9c8dc0b8170679cdc1ee9ee8dbcbaebf3f42897b","modified":1597418954948},{"_id":"themes/next/layout/_macro/post.swig","hash":"090b5a9b6fca8e968178004cbd6cff205b7eba57","modified":1597418954949},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"71655ca21907e9061b6e8ac52d0d8fbf54d0062b","modified":1597418954949},{"_id":"themes/next/layout/_partials/comments.swig","hash":"db6ab5421b5f4b7cb32ac73ad0e053fdf065f83e","modified":1597418954950},{"_id":"themes/next/layout/_partials/footer.swig","hash":"e5a2bdf45fde7cea9cb03993f5a0fd960326ed5d","modified":1597418954950},{"_id":"themes/next/layout/_partials/languages.swig","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1597418954953},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1597418954954},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"83a40ce83dfd5cada417444fb2d6f5470aae6bb0","modified":1597418954958},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"4d2c93c66e069852bb0e3ea2e268d213d07bfa3f","modified":1597418954959},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1597418954958},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"d1f2bfde6f1da51a2b35a7ab9e7e8eb6eefd1c6b","modified":1597418954958},{"_id":"themes/next/layout/_scripts/three.swig","hash":"a4f42f2301866bd25a784a2281069d8b66836d0b","modified":1597418954961},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"ef38c213679e7b6d2a4116f56c9e55d678446069","modified":1597418954961},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"b782eb2e34c0c15440837040b5d65b093ab6ec04","modified":1597418954963},{"_id":"themes/next/layout/_third-party/index.swig","hash":"70c3c01dd181de81270c57f3d99b6d8f4c723404","modified":1597418954966},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1597418954968},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"311e5eceec9e949f1ea8d623b083cec0b8700ff2","modified":1597418954967},{"_id":"themes/next/scripts/events/index.js","hash":"5743cde07f3d2aa11532a168a652e52ec28514fd","modified":1597418954975},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"aec50ed57b9d5d3faf2db3c88374f107203617e0","modified":1597418954979},{"_id":"themes/next/scripts/filters/front-matter.js","hash":"703bdd142a671b4b67d3d9dfb4a19d1dd7e7e8f7","modified":1597418954980},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1597418954981},{"_id":"themes/next/scripts/filters/locals.js","hash":"b193a936ee63451f09f8886343dcfdca577c0141","modified":1597418954980},{"_id":"themes/next/scripts/filters/post.js","hash":"44ba9b1c0bdda57590b53141306bb90adf0678db","modified":1597418954981},{"_id":"themes/next/scripts/helpers/engine.js","hash":"bdb424c3cc0d145bd0c6015bb1d2443c8a9c6cda","modified":1597418954981},{"_id":"themes/next/scripts/helpers/font.js","hash":"40cf00e9f2b7aa6e5f33d412e03ed10304b15fd7","modified":1597418954982},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"5e11f30ddb5093a88a687446617a46b048fa02e5","modified":1597418954982},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"958e86b2bd24e4fdfcbf9ce73e998efe3491a71f","modified":1597418954982},{"_id":"themes/next/scripts/tags/button.js","hash":"8c6b45f36e324820c919a822674703769e6da32c","modified":1597418954983},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"94e0bbc7999b359baa42fa3731bdcf89c79ae2b3","modified":1597418954983},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f1826ade2d135e2f60e2d95cb035383685b3370c","modified":1597418954983},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"d902fd313e8d35c3cc36f237607c2a0536c9edf1","modified":1597418954984},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1597418954984},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1597418954984},{"_id":"themes/next/scripts/tags/pdf.js","hash":"8c613b39e7bff735473e35244b5629d02ee20618","modified":1597418954985},{"_id":"themes/next/scripts/tags/tabs.js","hash":"93d8a734a3035c1d3f04933167b500517557ba3e","modified":1597418954985},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1597418954985},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1597418954984},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1597418955033},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1597418955032},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1597418955031},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1597418955033},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1597418955033},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1597418955034},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1597418955034},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1597418955034},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1597418955035},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1597418955036},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1597418955035},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1597418955035},{"_id":"themes/next/source/css/_colors.styl","hash":"a8442520f719d3d7a19811cb3b85bcfd4a596e1f","modified":1597418954986},{"_id":"themes/next/source/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1597418955036},{"_id":"themes/next/source/css/main.styl","hash":"a3a3bbb5a973052f0186b3523911cb2539ff7b88","modified":1597418955031},{"_id":"themes/next/source/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1597418955037},{"_id":"themes/next/source/css/_mixins.styl","hash":"e31a557f8879c2f4d8d5567ee1800b3e03f91f6e","modified":1597418955020},{"_id":"themes/next/source/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1597418955038},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1597418955031},{"_id":"themes/next/source/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1597418955036},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1597418955039},{"_id":"themes/next/source/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1597418955037},{"_id":"themes/next/source/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1597418955037},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"000bad572d76ee95d9c0a78f9ccdc8d97cc7d4b4","modified":1597418954950},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"810d544019e4a8651b756dd23e5592ee851eda71","modified":1597418954951},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"c70f8e71e026e878a4e9d5ab3bbbf9b0b23c240c","modified":1597418954951},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"7dbe93b8297b746afb89700b4d29289556e85267","modified":1597418954951},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"d31f896680a6c2f2c3f5128b4d4dd46c87ce2130","modified":1597418954952},{"_id":"themes/next/layout/_partials/header/menu-item.swig","hash":"9440d8a3a181698b80e1fa47f5104f4565d8cdf3","modified":1597418954952},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1597418954953},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"ae2261bea836581918a1c2b0d1028a78718434e0","modified":1597418954952},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"9b7a66791d7822c52117fe167612265356512477","modified":1597418954954},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"954ad71536b6eb08bd1f30ac6e2f5493b69d1c04","modified":1597418954954},{"_id":"themes/next/layout/_partials/post/post-followme.swig","hash":"ceba16b9bd3a0c5c8811af7e7e49d0f9dcb2f41e","modified":1597418954955},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1597418954955},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"2b1a73556595c37951e39574df5a3f20b2edeaef","modified":1597418954956},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"2be50f9bfb1c56b85b3b6910a7df27f51143632c","modified":1597418954956},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1597418954955},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"f48a6a8eba04eb962470ce76dd731e13074d4c45","modified":1597418954957},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"c46849e0af8f8fb78baccd40d2af14df04a074af","modified":1597418954957},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"077b5d66f6309f2e7dcf08645058ff2e03143e6c","modified":1597418954959},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1597418954960},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"48430bd03b8f19c9b8cdb2642005ed67d56c6e0b","modified":1597418954956},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1597418954960},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1597418954961},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"2fa2b51d56bfac6a1ea76d651c93b9c20b01c09b","modified":1597418954962},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1597418954962},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1597418954962},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1597418954963},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"1472cabb0181f60a6a0b7fec8899a4d03dfb2040","modified":1597418954963},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1597418954960},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b14908644225d78c864cd0a9b60c52407de56183","modified":1597418954964},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1597418954964},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"f7a9eca599a682479e8ca863db59be7c9c7508c8","modified":1597418954965},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"f39a5bf3ce9ee9adad282501235e0c588e4356ec","modified":1597418954964},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"d6ceb70648555338a80ae5724b778c8c58d7060d","modified":1597418954965},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"82f5b6822aa5ec958aa987b101ef860494c6cf1f","modified":1597418954965},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"be0a8eccf1f6dc21154af297fc79555343031277","modified":1597418954966},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"ecf751321e799f0fb3bf94d049e535130e2547aa","modified":1597418954967},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"6c5976621efd5db5f7c4c6b4f11bc79d6554885f","modified":1597418954966},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"d35a999d67f4c302f76fdf13744ceef3c6506481","modified":1597418954968},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1597418954968},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"4791c977a730f29c846efcf6c9c15131b9400ead","modified":1597418954967},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1597418954969},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.swig","hash":"4b1986e43d6abce13450d2b41a736dd6a5620a10","modified":1597418954969},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1597418954969},{"_id":"themes/next/layout/_third-party/statistics/firestore.swig","hash":"b26ac2bfbe91dd88267f8b96aee6bb222b265b7a","modified":1597418954970},{"_id":"themes/next/layout/_third-party/statistics/index.swig","hash":"5f6a966c509680dbfa70433f9d658cee59c304d7","modified":1597418954970},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.swig","hash":"d56d5af427cdfecc33a0f62ee62c056b4e33d095","modified":1597418954970},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"f3c43664a071ff3c0b28bd7e59b5523446829576","modified":1597418954971},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"d30b0e255a8092043bac46441243f943ed6fb09b","modified":1597418954971},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"a54708fd9309b4357c423a3730eb67f395344a5e","modified":1597418954977},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1597418954977},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1597418954978},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"4c0c99c7e0f00849003dfce02a131104fb671137","modified":1597418954978},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7f8b92913d21070b489457fa5ed996d2a55f2c32","modified":1597418954978},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1597418954978},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"d5fefc31fba4ab0188305b1af1feb61da49fdeb0","modified":1597418954979},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"6cbd85f9433c06bae22225ccf75ac55e04f2d106","modified":1597418954979},{"_id":"themes/next/scripts/events/lib/config.js","hash":"d34c6040b13649714939f59be5175e137de65ede","modified":1597418954975},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1597418954975},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"f233d8d0103ae7f9b861344aa65c1a3c1de8a845","modified":1597418954976},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"62df49459d552bbf73841753da8011a1f5e875c8","modified":1597418955029},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1597418955029},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"f70be8e229da7e1715c11dd0e975a2e71e453ac8","modified":1597418955029},{"_id":"themes/next/source/css/_variables/base.styl","hash":"818508748b7a62e02035e87fe58e75b603ed56dc","modified":1597418955030},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"612ec843372dae709acb17112c1145a53450cc59","modified":1597418955030},{"_id":"themes/next/source/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1597418955038},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1597418955038},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1597418955043},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1597418955044},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"8e7b57a72e757cf95278239641726bb2d5b869d1","modified":1597418954988},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"ca5e70662dcfb261c25191cc5db5084dcf661c76","modified":1597418954986},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"a47725574e1bee3bc3b63b0ff2039cc982b17eff","modified":1597418954987},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"2e3bf7baf383c9073ec5e67f157d3cb3823c0957","modified":1597418954999},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"a1690e035b505d28bdef2b4424c13fc6312ab049","modified":1597418955007},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"681d33e3bc85bdca407d93b134c089264837378c","modified":1597418955004},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a2e9e00962e43e98ec2614d6d248ef1773bb9b78","modified":1597418955013},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"b1f0fab7344a20ed6748b04065b141ad423cf4d9","modified":1597418955014},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"0b2c4b78eead410020d7c4ded59c75592a648df8","modified":1597418955013},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1597418955016},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"8f58570a1bbc34c4989a47a1b7d42a8030f38b06","modified":1597418955016},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"18ce72d90459c9aa66910ac64eae115f2dde3767","modified":1597418955017},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1597418955017},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"179e33b8ac7f4d8a8e76736a7e4f965fe9ab8b42","modified":1597418955020},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"f6516d0f7d89dc7b6c6e143a5af54b926f585d82","modified":1597418955021},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7785bd756e0c4acede3a47fec1ed7b55988385a5","modified":1597418955021},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"6136da4bbb7e70cec99f5c7ae8c7e74f5e7c261a","modified":1597418955022},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"7104b9cef90ca3b140d7a7afcf15540a250218fc","modified":1597418955022},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"f0131db6275ceaecae7e1a6a3798b8f89f6c850d","modified":1597418955024},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a717969829fa6ef88225095737df3f8ee86c286b","modified":1597418955023},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"4d1c17345d2d39ef7698f7acf82dfc0f59308c34","modified":1597418955024},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"93db5dafe9294542a6b5f647643cb9deaced8e06","modified":1597418955024},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"2b2e7b5cea7783c9c8bb92655e26a67c266886f0","modified":1597418955024},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1597418955025},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"e282df938bd029f391c466168d0e68389978f120","modified":1597418955025},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1597418955025},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"70a4324b70501132855b5e59029acfc5d3da1ebd","modified":1597418955026},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"85da2f3006f4bef9a2199416ecfab4d288f848c4","modified":1597418955026},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44f47c88c06d89d06f220f102649057118715828","modified":1597418955027},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"e740deadcfc4f29c5cb01e40f9df6277262ba4e3","modified":1597418955027},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"bb7ace23345364eb14983e860a7172e1683a4c94","modified":1597418955022},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1597418955042},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1597418955028},{"_id":"themes/next/source/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1597418955041},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1597418955042},{"_id":"themes/next/source/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1597418955043},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"e771dcb0b4673e063c0f3e2d73e7336ac05bcd57","modified":1597418954991},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1597418954991},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1597418954991},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1597418954988},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f49ca072b5a800f735e8f01fc3518f885951dd8e","modified":1597418954993},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"e75693f33dbc92afc55489438267869ae2f3db54","modified":1597418954993},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"d21d4ac1982c13d02f125a67c065412085a92ff2","modified":1597418954991},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"902569a9dea90548bec21a823dd3efd94ff7c133","modified":1597418954993},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"72d495a88f7d6515af425c12cbc67308a57d88ea","modified":1597418954994},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"ded41fd9d20a5e8db66aaff7cc50f105f5ef2952","modified":1597418954993},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"65cb6edb69e94e70e3291e9132408361148d41d5","modified":1597418954995},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"6a97bcfa635d637dc59005be3b931109e0d1ead5","modified":1597418954995},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1597418954995},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"d114b2a531129e739a27ba6271cfe6857aa9a865","modified":1597418954995},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a760ee83ba6216871a9f14c5e56dc9bd0d9e2103","modified":1597418954998},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1597418954998},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1e4190c10c9e0c9ce92653b0dbcec21754b0b69d","modified":1597418954994},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"b49e9fbd3c182b8fc066b8c2caf248e3eb748619","modified":1597418954999},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1597418954999},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"99e12c9ce3d14d4837e3d3f12fc867ba9c565317","modified":1597418954996},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"e2992846b39bf3857b5104675af02ba73e72eed5","modified":1597418955000},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"9f0b93d109c9aec79450c8a0cf4a4eab717d674d","modified":1597418955000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"9a878d0119785a2316f42aebcceaa05a120b9a7a","modified":1597418955000},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"454a4aebfabb4469b92a8cbb49f46c49ac9bf165","modified":1597418955001},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e2d606f1ac343e9be4f15dbbaf3464bc4df8bf81","modified":1597418955001},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"a793cfff86ad4af818faef04c18013077873f8f0","modified":1597418955002},{"_id":"themes/next/source/css/_common/outline/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1597418955002},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"5f432a6ed9ca80a413c68b00e93d4a411abf280a","modified":1597418955002},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"e7a9fdb6478b8674b1cdf94de4f8052843fb71d9","modified":1597418955001},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"b2fc519828fe89a1f8f03ff7b809ad68cd46f3d7","modified":1597418955004},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"2cb1876e9e0c9ac32160888af27b1178dbcb0616","modified":1597418955008},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"fa0222197b5eee47e18ac864cdc6eac75678b8fe","modified":1597418955008},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"1f0e7fbe80956f47087c2458ea880acf7a83078b","modified":1597418955009},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"45a239edca44acecf971d99b04f30a1aafbf6906","modified":1597418955002},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"9b479c2f9a9bfed77885e5093b8245cc5d768ec7","modified":1597418955010},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"a960a2dd587b15d3b3fe1b59525d6fa971c6a6ec","modified":1597418955010},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"44487d9ab290dc97871fa8dd4487016deb56e123","modified":1597418955008},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"a05a4031e799bc864a4536f9ef61fe643cd421af","modified":1597418955011},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"b3220db827e1adbca7880c2bb23e78fa7cbe95cb","modified":1597418955011},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"a9cd93c36bae5af9223e7804963096274e8a4f03","modified":1597418955011},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"2a47f8a6bb589c2fb635e6c1e4a2563c7f63c407","modified":1597418955012},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f71a3e86c05ea668b008cf05a81f67d92b6d65e4","modified":1597418955014},{"_id":"themes/next/source/css/_common/scaffolding/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1597418955015},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"35c871a809afa8306c8cde13651010e282548bc6","modified":1597418955015},{"_id":"themes/next/source/css/_common/scaffolding/highlight/theme.styl","hash":"3b3acc5caa0b95a2598bef4eeacb21bab21bea56","modified":1597418955015},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"1d2778ca5aeeeafaa690dc2766b01b352ab76a02","modified":1597418955018},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"709d10f763e357e1472d6471f8be384ec9e2d983","modified":1597418955018},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"d7fce4b51b5f4b7c31d93a9edb6c6ce740aa0d6b","modified":1597418955018},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"e4d9a77ffe98e851c1202676940097ba28253313","modified":1597418955019},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1597418955019},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"f23670f1d8e749f3e83766d446790d8fd9620278","modified":1597418955019},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1597418955020},{"_id":"source/images/snippet05.png","hash":"4a8a166395670e5262224f8dd5b6ee6b4311ec99","modified":1599754414782},{"_id":"source/images/snippet03.png","hash":"ad01b8cfbfc24963ab2701f0846a8d7822ac23a2","modified":1599753502192},{"_id":"themes/next/source/images/avatar.JPG","hash":"8695199ee56779554c9ea25a75459e97a15d0099","modified":1597412454911},{"_id":"public/search.xml","hash":"6a24e7e7c679d0aea0efab94c51b67b61c2e786e","modified":1599965813524},{"_id":"public/categories/index.html","hash":"98b8927690850d52e72e7c9206f8a07ad38f0e9b","modified":1599965813598},{"_id":"public/about/index.html","hash":"e9a486434cc8c622b8b6f3b28312ad9729d9070f","modified":1599965813598},{"_id":"public/favorite/index.html","hash":"f84adcc213c8269e827714cde5c7108c828ece2f","modified":1599965813599},{"_id":"public/home/index.html","hash":"0156eba4b0fad6ac0817ed387a3d9fbed8393caf","modified":1599965813599},{"_id":"public/tags/index.html","hash":"9c523061dc4ed2b84a8b4d00ecb0616de7ef56c1","modified":1599965813600},{"_id":"public/2019/05/09/focus/index.html","hash":"f06791170fbbcfe3b77f1f3b7a5e21b37dd7db2e","modified":1599965813600},{"_id":"public/2019/05/09/hello-world/index.html","hash":"f597be1beebbf1084087d92db69456840065e512","modified":1599965813600},{"_id":"public/archives/index.html","hash":"93135e1c9db7309ed60b972f3a6727cab075026b","modified":1599965813600},{"_id":"public/archives/2019/index.html","hash":"2a97aa037e65b41bcf068a3876df15a541957907","modified":1599965813600},{"_id":"public/archives/2019/05/index.html","hash":"c1daad7609ec31755ac9439a816b89daf5ceb8a6","modified":1599965813600},{"_id":"public/archives/2020/index.html","hash":"0e2d8c2a292be6544df5d4d91ca66fd257140131","modified":1599965813600},{"_id":"public/archives/2020/08/index.html","hash":"a8d69f2f0b96fe90df0158933a6989759d0c32ea","modified":1599965813600},{"_id":"public/categories/数据结构与算法/index.html","hash":"502a1ea3365d11380621f7e80aebf9295853bd9c","modified":1599965813600},{"_id":"public/tags/数据结构与算法/index.html","hash":"9b694b540d0483b61c5feda76653c32868aa9848","modified":1599965813600},{"_id":"public/markdown/Markdown语法.html","hash":"96ba7402ca30d115ff176ee4faf3c610a72f1c1f","modified":1599965813601},{"_id":"public/2020/08/23/时间复杂度/index.html","hash":"c8e1a37b433ef178ba6bc7e5e1668ba6862530c7","modified":1599965813601},{"_id":"public/index.html","hash":"82cde0b1ab200adc16c361612c51f5d118690431","modified":1599965813601},{"_id":"public/archives/2020/09/index.html","hash":"1ebf257ad95c7ff41924690925cd368b023590ff","modified":1599965813605},{"_id":"public/categories/Xcode/index.html","hash":"67b5c74c178aa939dfa370cd3158c3771f68ec6b","modified":1599965813605},{"_id":"public/tags/Xcode-iOS/index.html","hash":"b3eda151a2e300abc43502ca207f17a761374ba7","modified":1599965813605},{"_id":"public/2020/09/10/Xcode小技巧之Snippets/index.html","hash":"a90ee9d3d891a4bcf6d558aec1fe1f6081f6216d","modified":1599965813605},{"_id":"public/2020/08/30/数据结构与算法/index.html","hash":"31f0e496c780584b9846b58ed1bcacc8d270be3c","modified":1599965813605},{"_id":"public/images/timg.png","hash":"bb9df79e90dafda1ec956a260b463c4a70bb7a7e","modified":1599965813611},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1599965813611},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1599965813611},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1599965813611},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1599965813611},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1599965813611},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1599965813611},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1599965813611},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1599965813611},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1599965813612},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1599965813612},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1599965813612},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1599965813612},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1599965813612},{"_id":"public/lib/font-awesome/webfonts/fa-regular-400.woff2","hash":"260bb01acd44d88dcb7f501a238ab968f86bef9e","modified":1599965813612},{"_id":"public/images/snippet02.png","hash":"649b643b48a46f4027b48c56aa78fc56b5682cd8","modified":1599965813612},{"_id":"public/images/snippet06.png","hash":"6eea0bc6a95e034b654cf9572530b6644fe28178","modified":1599965813612},{"_id":"public/lib/font-awesome/webfonts/fa-solid-900.woff2","hash":"75a88815c47a249eadb5f0edc1675957f860cca7","modified":1599965814526},{"_id":"public/lib/font-awesome/webfonts/fa-brands-400.woff2","hash":"509988477da79c146cb93fb728405f18e923c2de","modified":1599965814527},{"_id":"public/images/snippet01.png","hash":"28d0902eaa5d04d41cac35d172dca3034ecefaa8","modified":1599965814527},{"_id":"public/js/algolia-search.js","hash":"498d233eb5c7af6940baf94c1a1c36fdf1dd2636","modified":1599965814531},{"_id":"public/js/next-boot.js","hash":"a1b0636423009d4a4e4cea97bcbf1842bfab582c","modified":1599965814531},{"_id":"public/js/bookmark.js","hash":"9734ebcb9b83489686f5c2da67dc9e6157e988ad","modified":1599965814532},{"_id":"public/js/motion.js","hash":"72df86f6dfa29cce22abeff9d814c9dddfcf13a9","modified":1599965814532},{"_id":"public/js/schemes/muse.js","hash":"1eb9b88103ddcf8827b1a7cbc56471a9c5592d53","modified":1599965814532},{"_id":"public/js/schemes/pisces.js","hash":"0ac5ce155bc58c972fe21c4c447f85e6f8755c62","modified":1599965814532},{"_id":"public/css/main.css","hash":"73bf0ef67d732339805dd22c34c1012e05ccc716","modified":1599965814533},{"_id":"public/images/snippet04.png","hash":"435866f5b9d4d8ccc14dc69b9fb24388aa0fc254","modified":1599965814533},{"_id":"public/js/utils.js","hash":"730cca7f164eaf258661a61ff3f769851ff1e5da","modified":1599965814539},{"_id":"public/js/local-search.js","hash":"35ccf100d8f9c0fd6bfbb7fa88c2a76c42a69110","modified":1599965814539},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1599965814540},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1599965814544},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1599965814566},{"_id":"public/lib/font-awesome/css/all.min.css","hash":"0038dc97c79451578b7bd48af60ba62282b4082b","modified":1599965814573},{"_id":"public/images/snippet05.png","hash":"4a8a166395670e5262224f8dd5b6ee6b4311ec99","modified":1599965814580},{"_id":"public/images/snippet03.png","hash":"ad01b8cfbfc24963ab2701f0846a8d7822ac23a2","modified":1599965814587},{"_id":"public/images/avatar.JPG","hash":"8695199ee56779554c9ea25a75459e97a15d0099","modified":1599965814683}],"Category":[{"name":"Xcode","_id":"ckf0ic1z50001n6vchcmijfbu"},{"name":"数据结构与算法","_id":"ckf0ic20j000bn6vcty661ete"}],"Data":[],"Page":[{"title":"文章分类","type":"categories","_content":"\n- iOS\n- Web\n- 数据结构与算法","source":"categories/index.md","raw":"---\ntitle: 文章分类\ntype: \"categories\"\n---\n\n- iOS\n- Web\n- 数据结构与算法","date":"2020-09-10T15:03:13.897Z","updated":"2020-08-23T05:47:12.472Z","path":"categories/index.html","comments":1,"layout":"page","_id":"ckf0ic20c0006n6vcf3mogmj4","content":"<ul>\n<li>iOS</li>\n<li>Web</li>\n<li>数据结构与算法</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>iOS</li>\n<li>Web</li>\n<li>数据结构与算法</li>\n</ul>\n"},{"_content":"# 关于\n## 这是关于\n - 写下博客，记录下\n - 没有记录，就没有发生","source":"about/index.md","raw":"# 关于\n## 这是关于\n - 写下博客，记录下\n - 没有记录，就没有发生","date":"2020-09-10T15:03:13.878Z","updated":"2019-05-09T12:12:31.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"ckf0ic20f0008n6vcepsl8l1b","content":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><h2 id=\"这是关于\"><a href=\"#这是关于\" class=\"headerlink\" title=\"这是关于\"></a>这是关于</h2><ul>\n<li>写下博客，记录下</li>\n<li>没有记录，就没有发生</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"关于\"><a href=\"#关于\" class=\"headerlink\" title=\"关于\"></a>关于</h1><h2 id=\"这是关于\"><a href=\"#这是关于\" class=\"headerlink\" title=\"这是关于\"></a>这是关于</h2><ul>\n<li>写下博客，记录下</li>\n<li>没有记录，就没有发生</li>\n</ul>\n"},{"_content":"# 这个是我的喜欢\n - 后面好好维护\n## 哈哈哈\n - [Focus's blog](https://starrykey.github.io)\n### 测试下","source":"favorite/index.md","raw":"# 这个是我的喜欢\n - 后面好好维护\n## 哈哈哈\n - [Focus's blog](https://starrykey.github.io)\n### 测试下","date":"2020-09-10T15:03:13.873Z","updated":"2019-05-09T11:37:45.000Z","path":"favorite/index.html","title":"","comments":1,"layout":"page","_id":"ckf0ic20i000an6vcdxcyevp3","content":"<h1 id=\"这个是我的喜欢\"><a href=\"#这个是我的喜欢\" class=\"headerlink\" title=\"这个是我的喜欢\"></a>这个是我的喜欢</h1><ul>\n<li>后面好好维护<h2 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h2></li>\n<li><a href=\"https://starrykey.github.io\" target=\"_blank\" rel=\"noopener\">Focus’s blog</a><h3 id=\"测试下\"><a href=\"#测试下\" class=\"headerlink\" title=\"测试下\"></a>测试下</h3></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"这个是我的喜欢\"><a href=\"#这个是我的喜欢\" class=\"headerlink\" title=\"这个是我的喜欢\"></a>这个是我的喜欢</h1><ul>\n<li>后面好好维护<h2 id=\"哈哈哈\"><a href=\"#哈哈哈\" class=\"headerlink\" title=\"哈哈哈\"></a>哈哈哈</h2></li>\n<li><a href=\"https://starrykey.github.io\" target=\"_blank\" rel=\"noopener\">Focus’s blog</a><h3 id=\"测试下\"><a href=\"#测试下\" class=\"headerlink\" title=\"测试下\"></a>测试下</h3></li>\n</ul>\n"},{"title":"home","date":"2019-05-11T02:57:06.000Z","_content":"\n\n","source":"home/index.md","raw":"---\ntitle: home\ndate: 2019-05-11 10:57:06\n---\n\n\n","updated":"2020-07-13T16:01:12.301Z","path":"home/index.html","comments":1,"layout":"page","_id":"ckf0ic20k000dn6vc4nln8iu1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"文章分类","date":"2020-08-23T05:53:14.000Z","type":"tags","_content":"\n- 数据结构与算法\n- iOS","source":"tags/index.md","raw":"---\ntitle: 文章分类\ndate: 2020-08-23 13:53:14\ntype: \"tags\"\n---\n\n- 数据结构与算法\n- iOS","updated":"2020-08-23T06:16:21.436Z","path":"tags/index.html","comments":1,"layout":"page","_id":"ckf0ic20l000en6vccbswf0q8","content":"<ul>\n<li>数据结构与算法</li>\n<li>iOS</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>数据结构与算法</li>\n<li>iOS</li>\n</ul>\n"},{"_content":"# Markdown语法说明\n - 理念：能让文档更容易读、写和随意改。\n - 目标：成为一种适用于网络的书写语言\n\n## 语法\n\n### 标题语法\n- 语法一 Setext\n\t>This is an H1\n\t>============\n\t>This is an H2\n\t>-------------\n - 语法二 Atx\n \t- # 一级标题\n\t- ## 二级标题\n\t- ### 三级标题\n### 段落\n - 换行：末尾两空格+回车\n\n### 区块引用\n - 先断行，每行前加>\n\t> 这是备注1\n\t> hhhad\n\t>> 这是备注2\n\t>>> 这是备注3\n - 引用的区块内也可以使用其他的Markdown语法\n > ## 这是一个标题\n > \n > 1. 这是第一行列表\n > 2. 这是第二行列表项\n >\n### 列表\n - 无序列表\n\t- 无序列表使用*、+、-作为列表标记\n\t* 这是无序列表1\n\t+ 这是无序列表2\n\t- 这是无序列表3\n - 有序列表使用数组机一个英文句号\n\t1. 有序列表1\n\t2. 有序列表2\n\t3. 有序列表3\n *   列表项目包含多个段落\n\n    列表项目可以包含多个段落，每个项目下的段落都必须缩进4个空格或是1个制表符。\n\t这是第二行\n \n *   This is a list item with two paragraphs.\n\n     This is the second paragraph in the list item. You're\n only required to indent the first line. Lorem ipsum dolor\n sit amet, consectetuer adipiscing elit.\n\n *   Another item in the same list.\n *   A list item in the same list\n\t \n\t >This is a blockquote.\n\t >inside a list item.\n\n *   一列表项包含一个列表区块：\n\n         <代码写在这>\n\n *   代码块的处理(区块缩进两次，即八个空格或是两个制表符)\n\n\t\t if(a>b) {\n\t\t\tprint(\"This is a test\")\n\t\t }\n### 代码区块\n>要在Markdown中建立代码区块，需要缩紧4个空格或者1个制表符(Tab)  \n>也可使用```代码段``` \n\n\t//这是代码段\n\tif (a > b) {\n\t    print(a)\n\t}\n\n```\n//这是代码段\nif(true){\n  print(\"这是代码段\")\n}\n```\n\n### 链接\n - 直接使用[链接名称](https://www.github.com)\n - 或者<https://www.baidu.com>\n\n### 分隔线\n ***\n * * *\n *****\n - - - \n ---------\n\n### 区段元素\n - 链接\n\t- 带标题\n\t\t- This is [an example](https://www.github.com \"GitHub\") inline link\n\t- 不带标题\n\t\t- [This link](https://www.github.com/) has no title attribute.\n\t\t- [foo]: http://example.com/  \"Optional Title Here\"\n\t- \n### 强调\n - *这是斜体*\n - _这是斜体_\n - __这是粗体__\n - **这是粗体**\n - ***这是粗斜体***\n - ___这是粗斜体___\n\n### 代码\n - 标记小段行内代码\n\t- Use the `print()` function.\n - 多个反引号\n\t- `` There is a literal backtick (`) here ``\n\t- A backtick-delimited string in a code span: `` `foo` ``\n### 图片\n - 表达方式\n - 样式\n \t- 行内式\n\t \t- ![Alt text](/path/to/img.jpg \"optional title\")\n \t- 参考式\n\t \t- ![Alt text][id]\n![](https://github.com/starryKey/FocusSpace/blob/master/images/Starry.jpg)\n","source":"markdown/Markdown语法.md","raw":"# Markdown语法说明\n - 理念：能让文档更容易读、写和随意改。\n - 目标：成为一种适用于网络的书写语言\n\n## 语法\n\n### 标题语法\n- 语法一 Setext\n\t>This is an H1\n\t>============\n\t>This is an H2\n\t>-------------\n - 语法二 Atx\n \t- # 一级标题\n\t- ## 二级标题\n\t- ### 三级标题\n### 段落\n - 换行：末尾两空格+回车\n\n### 区块引用\n - 先断行，每行前加>\n\t> 这是备注1\n\t> hhhad\n\t>> 这是备注2\n\t>>> 这是备注3\n - 引用的区块内也可以使用其他的Markdown语法\n > ## 这是一个标题\n > \n > 1. 这是第一行列表\n > 2. 这是第二行列表项\n >\n### 列表\n - 无序列表\n\t- 无序列表使用*、+、-作为列表标记\n\t* 这是无序列表1\n\t+ 这是无序列表2\n\t- 这是无序列表3\n - 有序列表使用数组机一个英文句号\n\t1. 有序列表1\n\t2. 有序列表2\n\t3. 有序列表3\n *   列表项目包含多个段落\n\n    列表项目可以包含多个段落，每个项目下的段落都必须缩进4个空格或是1个制表符。\n\t这是第二行\n \n *   This is a list item with two paragraphs.\n\n     This is the second paragraph in the list item. You're\n only required to indent the first line. Lorem ipsum dolor\n sit amet, consectetuer adipiscing elit.\n\n *   Another item in the same list.\n *   A list item in the same list\n\t \n\t >This is a blockquote.\n\t >inside a list item.\n\n *   一列表项包含一个列表区块：\n\n         <代码写在这>\n\n *   代码块的处理(区块缩进两次，即八个空格或是两个制表符)\n\n\t\t if(a>b) {\n\t\t\tprint(\"This is a test\")\n\t\t }\n### 代码区块\n>要在Markdown中建立代码区块，需要缩紧4个空格或者1个制表符(Tab)  \n>也可使用```代码段``` \n\n\t//这是代码段\n\tif (a > b) {\n\t    print(a)\n\t}\n\n```\n//这是代码段\nif(true){\n  print(\"这是代码段\")\n}\n```\n\n### 链接\n - 直接使用[链接名称](https://www.github.com)\n - 或者<https://www.baidu.com>\n\n### 分隔线\n ***\n * * *\n *****\n - - - \n ---------\n\n### 区段元素\n - 链接\n\t- 带标题\n\t\t- This is [an example](https://www.github.com \"GitHub\") inline link\n\t- 不带标题\n\t\t- [This link](https://www.github.com/) has no title attribute.\n\t\t- [foo]: http://example.com/  \"Optional Title Here\"\n\t- \n### 强调\n - *这是斜体*\n - _这是斜体_\n - __这是粗体__\n - **这是粗体**\n - ***这是粗斜体***\n - ___这是粗斜体___\n\n### 代码\n - 标记小段行内代码\n\t- Use the `print()` function.\n - 多个反引号\n\t- `` There is a literal backtick (`) here ``\n\t- A backtick-delimited string in a code span: `` `foo` ``\n### 图片\n - 表达方式\n - 样式\n \t- 行内式\n\t \t- ![Alt text](/path/to/img.jpg \"optional title\")\n \t- 参考式\n\t \t- ![Alt text][id]\n![](https://github.com/starryKey/FocusSpace/blob/master/images/Starry.jpg)\n","date":"2020-09-10T15:03:13.869Z","updated":"2019-05-11T09:35:11.000Z","path":"markdown/Markdown语法.html","title":"","comments":1,"layout":"page","_id":"ckf0ic20m000fn6vcbba2j55s","content":"<h1 id=\"Markdown语法说明\"><a href=\"#Markdown语法说明\" class=\"headerlink\" title=\"Markdown语法说明\"></a>Markdown语法说明</h1><ul>\n<li>理念：能让文档更容易读、写和随意改。</li>\n<li>目标：成为一种适用于网络的书写语言</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h3><ul>\n<li>语法一 Setext<blockquote>\n<h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><ul>\n<li>语法二 Atx<ul>\n<li><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><ul>\n<li><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></li>\n<li><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><ul>\n<li>换行：末尾两空格+回车</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h3><ul>\n<li>先断行，每行前加&gt;<blockquote>\n<p>这是备注1<br>hhhad</p>\n<blockquote>\n<p>这是备注2</p>\n<blockquote>\n<p>这是备注3</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>引用的区块内也可以使用其他的Markdown语法<blockquote>\n<h2 id=\"这是一个标题\"><a href=\"#这是一个标题\" class=\"headerlink\" title=\"这是一个标题\"></a>这是一个标题</h2><ol>\n<li>这是第一行列表</li>\n<li>这是第二行列表项</li>\n</ol>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3></li>\n<li>无序列表<ul>\n<li>无序列表使用*、+、-作为列表标记</li>\n</ul>\n<ul>\n<li>这是无序列表1</li>\n</ul>\n<ul>\n<li>这是无序列表2</li>\n</ul>\n<ul>\n<li>这是无序列表3</li>\n</ul>\n</li>\n<li>有序列表使用数组机一个英文句号<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>列表项目包含多个段落</p>\n<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进4个空格或是1个制表符。<br>这是第二行</p>\n</li>\n<li><p>This is a list item with two paragraphs.</p>\n<p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p>\n</li>\n<li><p>Another item in the same list.</p>\n</li>\n<li><p>A list item in the same list</p>\n<blockquote>\n<p>This is a blockquote.<br>inside a list item.</p>\n</blockquote>\n</li>\n<li><p>一列表项包含一个列表区块：</p>\n<pre><code>&lt;代码写在这&gt;\n</code></pre></li>\n<li><p>代码块的处理(区块缩进两次，即八个空格或是两个制表符)</p>\n<pre><code>if(a&gt;b) {\n   print(&quot;This is a test&quot;)\n}\n</code></pre><h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><blockquote>\n<p>要在Markdown中建立代码区块，需要缩紧4个空格或者1个制表符(Tab)<br>也可使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//这是代码段</span><br><span class=\"line\">if (a &gt; b) &#123;</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</li>\n</ul>\n<p>//这是代码段<br>if(true){<br>  print(“这是代码段”)<br>}<br><code>`</code></p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ul>\n<li>直接使用<a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">链接名称</a></li>\n<li>或者<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></li>\n</ul>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<h3 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h3><ul>\n<li>链接<ul>\n<li>带标题<ul>\n<li>This is <a href=\"https://www.github.com\" title=\"GitHub\" target=\"_blank\" rel=\"noopener\">an example</a> inline link</li>\n</ul>\n</li>\n<li>不带标题<ul>\n<li><a href=\"https://www.github.com/\" target=\"_blank\" rel=\"noopener\">This link</a> has no title attribute.</li>\n<li>[foo]: <a href=\"http://example.com/\" target=\"_blank\" rel=\"noopener\">http://example.com/</a>  “Optional Title Here”</li>\n</ul>\n</li>\n<li><h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3></li>\n</ul>\n</li>\n<li><em>这是斜体</em></li>\n<li><em>这是斜体</em></li>\n<li><strong>这是粗体</strong></li>\n<li><strong>这是粗体</strong></li>\n<li><strong><em>这是粗斜体</em></strong></li>\n<li><strong><em>这是粗斜体</em></strong></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>标记小段行内代码<ul>\n<li>Use the <code>print()</code> function.</li>\n</ul>\n</li>\n<li>多个反引号<ul>\n<li><code>There is a literal backtick (`) here</code></li>\n<li>A backtick-delimited string in a code span: <code>`foo`</code><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3></li>\n</ul>\n</li>\n<li>表达方式</li>\n<li>样式<ul>\n<li>行内式<ul>\n<li><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"optional title\"></li>\n</ul>\n</li>\n<li>参考式<ul>\n<li>![Alt text][id]<br><img src=\"https://github.com/starryKey/FocusSpace/blob/master/images/Starry.jpg\" alt></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Markdown语法说明\"><a href=\"#Markdown语法说明\" class=\"headerlink\" title=\"Markdown语法说明\"></a>Markdown语法说明</h1><ul>\n<li>理念：能让文档更容易读、写和随意改。</li>\n<li>目标：成为一种适用于网络的书写语言</li>\n</ul>\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><h3 id=\"标题语法\"><a href=\"#标题语法\" class=\"headerlink\" title=\"标题语法\"></a>标题语法</h3><ul>\n<li>语法一 Setext<blockquote>\n<h1 id=\"This-is-an-H1\"><a href=\"#This-is-an-H1\" class=\"headerlink\" title=\"This is an H1\"></a>This is an H1</h1><h2 id=\"This-is-an-H2\"><a href=\"#This-is-an-H2\" class=\"headerlink\" title=\"This is an H2\"></a>This is an H2</h2><ul>\n<li>语法二 Atx<ul>\n<li><h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><ul>\n<li><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></li>\n<li><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"段落\"><a href=\"#段落\" class=\"headerlink\" title=\"段落\"></a>段落</h3><ul>\n<li>换行：末尾两空格+回车</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"区块引用\"><a href=\"#区块引用\" class=\"headerlink\" title=\"区块引用\"></a>区块引用</h3><ul>\n<li>先断行，每行前加&gt;<blockquote>\n<p>这是备注1<br>hhhad</p>\n<blockquote>\n<p>这是备注2</p>\n<blockquote>\n<p>这是备注3</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>引用的区块内也可以使用其他的Markdown语法<blockquote>\n<h2 id=\"这是一个标题\"><a href=\"#这是一个标题\" class=\"headerlink\" title=\"这是一个标题\"></a>这是一个标题</h2><ol>\n<li>这是第一行列表</li>\n<li>这是第二行列表项</li>\n</ol>\n</blockquote>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3></li>\n<li>无序列表<ul>\n<li>无序列表使用*、+、-作为列表标记</li>\n</ul>\n<ul>\n<li>这是无序列表1</li>\n</ul>\n<ul>\n<li>这是无序列表2</li>\n</ul>\n<ul>\n<li>这是无序列表3</li>\n</ul>\n</li>\n<li>有序列表使用数组机一个英文句号<ol>\n<li>有序列表1</li>\n<li>有序列表2</li>\n<li>有序列表3</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li><p>列表项目包含多个段落</p>\n<p>列表项目可以包含多个段落，每个项目下的段落都必须缩进4个空格或是1个制表符。<br>这是第二行</p>\n</li>\n<li><p>This is a list item with two paragraphs.</p>\n<p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p>\n</li>\n<li><p>Another item in the same list.</p>\n</li>\n<li><p>A list item in the same list</p>\n<blockquote>\n<p>This is a blockquote.<br>inside a list item.</p>\n</blockquote>\n</li>\n<li><p>一列表项包含一个列表区块：</p>\n<pre><code>&lt;代码写在这&gt;\n</code></pre></li>\n<li><p>代码块的处理(区块缩进两次，即八个空格或是两个制表符)</p>\n<pre><code>if(a&gt;b) {\n   print(&quot;This is a test&quot;)\n}\n</code></pre><h3 id=\"代码区块\"><a href=\"#代码区块\" class=\"headerlink\" title=\"代码区块\"></a>代码区块</h3><blockquote>\n<p>要在Markdown中建立代码区块，需要缩紧4个空格或者1个制表符(Tab)<br>也可使用<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">//这是代码段</span><br><span class=\"line\">if (a &gt; b) &#123;</span><br><span class=\"line\">    print(a)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n</li>\n</ul>\n<p>//这是代码段<br>if(true){<br>  print(“这是代码段”)<br>}<br><code>`</code></p>\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><ul>\n<li>直接使用<a href=\"https://www.github.com\" target=\"_blank\" rel=\"noopener\">链接名称</a></li>\n<li>或者<a href=\"https://www.baidu.com\" target=\"_blank\" rel=\"noopener\">https://www.baidu.com</a></li>\n</ul>\n<h3 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h3><hr>\n<hr>\n<hr>\n<hr>\n<hr>\n<h3 id=\"区段元素\"><a href=\"#区段元素\" class=\"headerlink\" title=\"区段元素\"></a>区段元素</h3><ul>\n<li>链接<ul>\n<li>带标题<ul>\n<li>This is <a href=\"https://www.github.com\" title=\"GitHub\" target=\"_blank\" rel=\"noopener\">an example</a> inline link</li>\n</ul>\n</li>\n<li>不带标题<ul>\n<li><a href=\"https://www.github.com/\" target=\"_blank\" rel=\"noopener\">This link</a> has no title attribute.</li>\n<li>[foo]: <a href=\"http://example.com/\" target=\"_blank\" rel=\"noopener\">http://example.com/</a>  “Optional Title Here”</li>\n</ul>\n</li>\n<li><h3 id=\"强调\"><a href=\"#强调\" class=\"headerlink\" title=\"强调\"></a>强调</h3></li>\n</ul>\n</li>\n<li><em>这是斜体</em></li>\n<li><em>这是斜体</em></li>\n<li><strong>这是粗体</strong></li>\n<li><strong>这是粗体</strong></li>\n<li><strong><em>这是粗斜体</em></strong></li>\n<li><strong><em>这是粗斜体</em></strong></li>\n</ul>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><ul>\n<li>标记小段行内代码<ul>\n<li>Use the <code>print()</code> function.</li>\n</ul>\n</li>\n<li>多个反引号<ul>\n<li><code>There is a literal backtick (`) here</code></li>\n<li>A backtick-delimited string in a code span: <code>`foo`</code><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3></li>\n</ul>\n</li>\n<li>表达方式</li>\n<li>样式<ul>\n<li>行内式<ul>\n<li><img src=\"/path/to/img.jpg\" alt=\"Alt text\" title=\"optional title\"></li>\n</ul>\n</li>\n<li>参考式<ul>\n<li>![Alt text][id]<br><img src=\"https://github.com/starryKey/FocusSpace/blob/master/images/Starry.jpg\" alt></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n"}],"Post":[{"title":"Xcode小技巧之Snippets","date":"2020-09-10T15:15:14.000Z","_content":"\nXcode中有许多小功能，可能经常被使用到，但是却没被发觉，如`Xcode Snippets`。\n\n在敲代码时，经常会遇到刚敲几个字母就会有相应的提示，点击`enter`选中时，代码段立即显示出来，再根据对应的提示进行代码编写，极大地提升了代码的编程效率，如：\n\n![snippet](./../images/snippet01.png)\n\n带有`{}`图标的均代表有该操作，只需输入几个单词就能完成如下代码的编写。\n\n```\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        <#code to be executed once#>\n    });\n\n```\n\n以上实例就是`Xcode Snippets`的应用，这是Xcode自带的一些`Code Snippet`，我们也可以自定义接下来将通过一些实例自定义一些常见的`Code Snippet`。\n\n\n## 查找`Code Snippet`\n\nXcode中默认自带一些常见的`Code Snippet`，通过以下方式可以快速打开`Code Snippet`:\n\n- 1、快捷键`cmd + shift + L`\n- 2、点击Xcode右上角的工具栏中的`+`,如下图所示：\n\n    ![snippet](./../images/snippet02.png)\n\n按照上述其中之一操作后，即可显示如下界面：\n\n![snippet](./../images/snippet03.png)\n\n通过输入对应的字段即可查找相关的`Code Snippet`.\n\n## 新增自定义`Code Snippet`\n\n在Xcode中，通过在源文件中右键，并点击`Create Code Snippet`,即可快速创建代码段，如下图所示：\n\n![snippet](./../images/snippet04.png)\n\n打开面板后，通过输入对应的name、Completion,即可完成代码段的新建，如下图所示：\n\n![snippet](./../images/snippet05.png)\n\n其中`Completion`代表代码段的简写，通过在编码时快速输入该简写，达到展示代码段的目的，如下所示：\n\n![snippet](./../images/snippet06.png)\n\n\n## 自定义常见的`Code Snippet`\n可以将平时用经常用到，但又都是大量重读性的代码自定义成代码段，提高编写效率。如常见的属性声明、固定值等\n\n**01、属性声明：**\n\n```\n//Strong\n@property (nonatomic, strong) <#Class#> *<#object#>;\n//Weak\n@property (nonatomic, weak) <#Class#> *<#object#>;\n//assign\n@property (nonatomic, assign) <#Class#> <#property#>;\n//copy\n@property (nonatomic, copy) NSString *<#string#>;\n//delegate\n@property (nonatomic, weak) id<<#protocol#>> <#delegate#>;\n//Block声明\n@property (nonatomic, copy) <#returnType#>(^<#blockName#>)(<#arguments#>);\n\n```\n**02、固定值**\n罗列部分，根据需要增加\n\n| 含义 | Completion | 代码段 |\n|----|----|----|\n| 屏幕宽度 | ksw | [UIScreen mainScreen].bounds.size.width; |\n| 屏幕高度 | ksh | [UIScreen mainScreen].bounds.size.height; |\n\n**03、单例**\n\n## 共享代码段\n\n针对自定义的一些代码段会被存放在`~/Library/Developer/Xcode /UserData/CodeSnippets/`目录下，可以备份对应的文件，以便切换电脑时复用。\n\n\n","source":"_posts/Xcode小技巧之Snippets.md","raw":"---\ntitle: Xcode小技巧之Snippets\ndate: 2020-09-10 23:15:14\ntags: Xcode iOS\ncategories:\n    - Xcode\n---\n\nXcode中有许多小功能，可能经常被使用到，但是却没被发觉，如`Xcode Snippets`。\n\n在敲代码时，经常会遇到刚敲几个字母就会有相应的提示，点击`enter`选中时，代码段立即显示出来，再根据对应的提示进行代码编写，极大地提升了代码的编程效率，如：\n\n![snippet](./../images/snippet01.png)\n\n带有`{}`图标的均代表有该操作，只需输入几个单词就能完成如下代码的编写。\n\n```\n    static dispatch_once_t onceToken;\n    dispatch_once(&onceToken, ^{\n        <#code to be executed once#>\n    });\n\n```\n\n以上实例就是`Xcode Snippets`的应用，这是Xcode自带的一些`Code Snippet`，我们也可以自定义接下来将通过一些实例自定义一些常见的`Code Snippet`。\n\n\n## 查找`Code Snippet`\n\nXcode中默认自带一些常见的`Code Snippet`，通过以下方式可以快速打开`Code Snippet`:\n\n- 1、快捷键`cmd + shift + L`\n- 2、点击Xcode右上角的工具栏中的`+`,如下图所示：\n\n    ![snippet](./../images/snippet02.png)\n\n按照上述其中之一操作后，即可显示如下界面：\n\n![snippet](./../images/snippet03.png)\n\n通过输入对应的字段即可查找相关的`Code Snippet`.\n\n## 新增自定义`Code Snippet`\n\n在Xcode中，通过在源文件中右键，并点击`Create Code Snippet`,即可快速创建代码段，如下图所示：\n\n![snippet](./../images/snippet04.png)\n\n打开面板后，通过输入对应的name、Completion,即可完成代码段的新建，如下图所示：\n\n![snippet](./../images/snippet05.png)\n\n其中`Completion`代表代码段的简写，通过在编码时快速输入该简写，达到展示代码段的目的，如下所示：\n\n![snippet](./../images/snippet06.png)\n\n\n## 自定义常见的`Code Snippet`\n可以将平时用经常用到，但又都是大量重读性的代码自定义成代码段，提高编写效率。如常见的属性声明、固定值等\n\n**01、属性声明：**\n\n```\n//Strong\n@property (nonatomic, strong) <#Class#> *<#object#>;\n//Weak\n@property (nonatomic, weak) <#Class#> *<#object#>;\n//assign\n@property (nonatomic, assign) <#Class#> <#property#>;\n//copy\n@property (nonatomic, copy) NSString *<#string#>;\n//delegate\n@property (nonatomic, weak) id<<#protocol#>> <#delegate#>;\n//Block声明\n@property (nonatomic, copy) <#returnType#>(^<#blockName#>)(<#arguments#>);\n\n```\n**02、固定值**\n罗列部分，根据需要增加\n\n| 含义 | Completion | 代码段 |\n|----|----|----|\n| 屏幕宽度 | ksw | [UIScreen mainScreen].bounds.size.width; |\n| 屏幕高度 | ksh | [UIScreen mainScreen].bounds.size.height; |\n\n**03、单例**\n\n## 共享代码段\n\n针对自定义的一些代码段会被存放在`~/Library/Developer/Xcode /UserData/CodeSnippets/`目录下，可以备份对应的文件，以便切换电脑时复用。\n\n\n","slug":"Xcode小技巧之Snippets","published":1,"updated":"2020-09-13T02:55:54.781Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0ic1yw0000n6vcgb7tykmh","content":"<p>Xcode中有许多小功能，可能经常被使用到，但是却没被发觉，如<code>Xcode Snippets</code>。</p>\n<p>在敲代码时，经常会遇到刚敲几个字母就会有相应的提示，点击<code>enter</code>选中时，代码段立即显示出来，再根据对应的提示进行代码编写，极大地提升了代码的编程效率，如：</p>\n<p><img src=\"./../images/snippet01.png\" alt=\"snippet\"></p>\n<p>带有<code>{}</code>图标的均代表有该操作，只需输入几个单词就能完成如下代码的编写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static dispatch_once_t onceToken;</span><br><span class=\"line\">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">    &lt;#code to be executed once#&gt;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>以上实例就是<code>Xcode Snippets</code>的应用，这是Xcode自带的一些<code>Code Snippet</code>，我们也可以自定义接下来将通过一些实例自定义一些常见的<code>Code Snippet</code>。</p>\n<h2 id=\"查找Code-Snippet\"><a href=\"#查找Code-Snippet\" class=\"headerlink\" title=\"查找Code Snippet\"></a>查找<code>Code Snippet</code></h2><p>Xcode中默认自带一些常见的<code>Code Snippet</code>，通过以下方式可以快速打开<code>Code Snippet</code>:</p>\n<ul>\n<li>1、快捷键<code>cmd + shift + L</code></li>\n<li><p>2、点击Xcode右上角的工具栏中的<code>+</code>,如下图所示：</p>\n<p>  <img src=\"./../images/snippet02.png\" alt=\"snippet\"></p>\n</li>\n</ul>\n<p>按照上述其中之一操作后，即可显示如下界面：</p>\n<p><img src=\"./../images/snippet03.png\" alt=\"snippet\"></p>\n<p>通过输入对应的字段即可查找相关的<code>Code Snippet</code>.</p>\n<h2 id=\"新增自定义Code-Snippet\"><a href=\"#新增自定义Code-Snippet\" class=\"headerlink\" title=\"新增自定义Code Snippet\"></a>新增自定义<code>Code Snippet</code></h2><p>在Xcode中，通过在源文件中右键，并点击<code>Create Code Snippet</code>,即可快速创建代码段，如下图所示：</p>\n<p><img src=\"./../images/snippet04.png\" alt=\"snippet\"></p>\n<p>打开面板后，通过输入对应的name、Completion,即可完成代码段的新建，如下图所示：</p>\n<p><img src=\"./../images/snippet05.png\" alt=\"snippet\"></p>\n<p>其中<code>Completion</code>代表代码段的简写，通过在编码时快速输入该简写，达到展示代码段的目的，如下所示：</p>\n<p><img src=\"./../images/snippet06.png\" alt=\"snippet\"></p>\n<h2 id=\"自定义常见的Code-Snippet\"><a href=\"#自定义常见的Code-Snippet\" class=\"headerlink\" title=\"自定义常见的Code Snippet\"></a>自定义常见的<code>Code Snippet</code></h2><p>可以将平时用经常用到，但又都是大量重读性的代码自定义成代码段，提高编写效率。如常见的属性声明、固定值等</p>\n<p><strong>01、属性声明：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Strong</span><br><span class=\"line\">@property (nonatomic, strong) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class=\"line\">//Weak</span><br><span class=\"line\">@property (nonatomic, weak) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class=\"line\">//assign</span><br><span class=\"line\">@property (nonatomic, assign) &lt;#Class#&gt; &lt;#property#&gt;;</span><br><span class=\"line\">//copy</span><br><span class=\"line\">@property (nonatomic, copy) NSString *&lt;#string#&gt;;</span><br><span class=\"line\">//delegate</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;&lt;#protocol#&gt;&gt; &lt;#delegate#&gt;;</span><br><span class=\"line\">//Block声明</span><br><span class=\"line\">@property (nonatomic, copy) &lt;#returnType#&gt;(^&lt;#blockName#&gt;)(&lt;#arguments#&gt;);</span><br></pre></td></tr></table></figure>\n<p><strong>02、固定值</strong><br>罗列部分，根据需要增加</p>\n<table>\n<thead>\n<tr>\n<th>含义</th>\n<th>Completion</th>\n<th>代码段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>屏幕宽度</td>\n<td>ksw</td>\n<td>[UIScreen mainScreen].bounds.size.width;</td>\n</tr>\n<tr>\n<td>屏幕高度</td>\n<td>ksh</td>\n<td>[UIScreen mainScreen].bounds.size.height;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>03、单例</strong></p>\n<h2 id=\"共享代码段\"><a href=\"#共享代码段\" class=\"headerlink\" title=\"共享代码段\"></a>共享代码段</h2><p>针对自定义的一些代码段会被存放在<code>~/Library/Developer/Xcode /UserData/CodeSnippets/</code>目录下，可以备份对应的文件，以便切换电脑时复用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Xcode中有许多小功能，可能经常被使用到，但是却没被发觉，如<code>Xcode Snippets</code>。</p>\n<p>在敲代码时，经常会遇到刚敲几个字母就会有相应的提示，点击<code>enter</code>选中时，代码段立即显示出来，再根据对应的提示进行代码编写，极大地提升了代码的编程效率，如：</p>\n<p><img src=\"./../images/snippet01.png\" alt=\"snippet\"></p>\n<p>带有<code>{}</code>图标的均代表有该操作，只需输入几个单词就能完成如下代码的编写。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">static dispatch_once_t onceToken;</span><br><span class=\"line\">dispatch_once(&amp;onceToken, ^&#123;</span><br><span class=\"line\">    &lt;#code to be executed once#&gt;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>以上实例就是<code>Xcode Snippets</code>的应用，这是Xcode自带的一些<code>Code Snippet</code>，我们也可以自定义接下来将通过一些实例自定义一些常见的<code>Code Snippet</code>。</p>\n<h2 id=\"查找Code-Snippet\"><a href=\"#查找Code-Snippet\" class=\"headerlink\" title=\"查找Code Snippet\"></a>查找<code>Code Snippet</code></h2><p>Xcode中默认自带一些常见的<code>Code Snippet</code>，通过以下方式可以快速打开<code>Code Snippet</code>:</p>\n<ul>\n<li>1、快捷键<code>cmd + shift + L</code></li>\n<li><p>2、点击Xcode右上角的工具栏中的<code>+</code>,如下图所示：</p>\n<p>  <img src=\"./../images/snippet02.png\" alt=\"snippet\"></p>\n</li>\n</ul>\n<p>按照上述其中之一操作后，即可显示如下界面：</p>\n<p><img src=\"./../images/snippet03.png\" alt=\"snippet\"></p>\n<p>通过输入对应的字段即可查找相关的<code>Code Snippet</code>.</p>\n<h2 id=\"新增自定义Code-Snippet\"><a href=\"#新增自定义Code-Snippet\" class=\"headerlink\" title=\"新增自定义Code Snippet\"></a>新增自定义<code>Code Snippet</code></h2><p>在Xcode中，通过在源文件中右键，并点击<code>Create Code Snippet</code>,即可快速创建代码段，如下图所示：</p>\n<p><img src=\"./../images/snippet04.png\" alt=\"snippet\"></p>\n<p>打开面板后，通过输入对应的name、Completion,即可完成代码段的新建，如下图所示：</p>\n<p><img src=\"./../images/snippet05.png\" alt=\"snippet\"></p>\n<p>其中<code>Completion</code>代表代码段的简写，通过在编码时快速输入该简写，达到展示代码段的目的，如下所示：</p>\n<p><img src=\"./../images/snippet06.png\" alt=\"snippet\"></p>\n<h2 id=\"自定义常见的Code-Snippet\"><a href=\"#自定义常见的Code-Snippet\" class=\"headerlink\" title=\"自定义常见的Code Snippet\"></a>自定义常见的<code>Code Snippet</code></h2><p>可以将平时用经常用到，但又都是大量重读性的代码自定义成代码段，提高编写效率。如常见的属性声明、固定值等</p>\n<p><strong>01、属性声明：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//Strong</span><br><span class=\"line\">@property (nonatomic, strong) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class=\"line\">//Weak</span><br><span class=\"line\">@property (nonatomic, weak) &lt;#Class#&gt; *&lt;#object#&gt;;</span><br><span class=\"line\">//assign</span><br><span class=\"line\">@property (nonatomic, assign) &lt;#Class#&gt; &lt;#property#&gt;;</span><br><span class=\"line\">//copy</span><br><span class=\"line\">@property (nonatomic, copy) NSString *&lt;#string#&gt;;</span><br><span class=\"line\">//delegate</span><br><span class=\"line\">@property (nonatomic, weak) id&lt;&lt;#protocol#&gt;&gt; &lt;#delegate#&gt;;</span><br><span class=\"line\">//Block声明</span><br><span class=\"line\">@property (nonatomic, copy) &lt;#returnType#&gt;(^&lt;#blockName#&gt;)(&lt;#arguments#&gt;);</span><br></pre></td></tr></table></figure>\n<p><strong>02、固定值</strong><br>罗列部分，根据需要增加</p>\n<table>\n<thead>\n<tr>\n<th>含义</th>\n<th>Completion</th>\n<th>代码段</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>屏幕宽度</td>\n<td>ksw</td>\n<td>[UIScreen mainScreen].bounds.size.width;</td>\n</tr>\n<tr>\n<td>屏幕高度</td>\n<td>ksh</td>\n<td>[UIScreen mainScreen].bounds.size.height;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>03、单例</strong></p>\n<h2 id=\"共享代码段\"><a href=\"#共享代码段\" class=\"headerlink\" title=\"共享代码段\"></a>共享代码段</h2><p>针对自定义的一些代码段会被存放在<code>~/Library/Developer/Xcode /UserData/CodeSnippets/</code>目录下，可以备份对应的文件，以便切换电脑时复用。</p>\n"},{"title":"哈哈哈😂","_content":"\n## 这是个测试的文档\n\n","source":"_posts/hello-world.md","raw":"---\ntitle: 哈哈哈😂\n---\n\n## 这是个测试的文档\n\n","slug":"hello-world","published":1,"date":"2019-05-09T11:51:26.000Z","updated":"2019-05-09T11:51:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0ic20a0005n6vc76phs4xd","content":"<h2 id=\"这是个测试的文档\"><a href=\"#这是个测试的文档\" class=\"headerlink\" title=\"这是个测试的文档\"></a>这是个测试的文档</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"这是个测试的文档\"><a href=\"#这是个测试的文档\" class=\"headerlink\" title=\"这是个测试的文档\"></a>这是个测试的文档</h2>"},{"title":"时间复杂度","date":"2020-08-23T05:50:17.000Z","_content":"\n### 时间复杂度\n算法的时间复杂度，用来度量算法的运行时间，以算法中频度最大的语句来度量，记作: T(n) = O(f(n))，它表示随着输入大小n的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。\n\n**时间复杂度的计算**\n如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))，通常称为大O推导法。时间复杂度计算的一般法则如下：\n- 一个顺序结构的代码，时间复杂度是O(1),对于一个for循环，假设循环次数为n, 循环体的时间复杂度为O(m),那么该循环的时间复杂度为O(n * m)。如下：\n```\n    func testFunc(_ n: Int) {\n        for i in 0..<n {                // 循环次数：n\n            print(\"index = \\(i)\")       // 循环体时间复杂度O(1)\n        }\n    }\n```\n    \n    上述时间时间复杂度为O(n * 1)，即O(n).\n- 嵌套循环时，假设循环体的时间复杂度为O(n),各个循环的循环次数为a、b、c...，那么该循环侧时间复杂度为O(n * a * b * c * ...)，分析时可由内向外分析：\n```\n    func testFunc(_ n: Int) {\n        for i in 0..<n {                        // 循环次数 n\n            for j in 0..<n{                     // 循环次数 n\n                print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n            }\n        }\n    }\n```\n\n此时时间复杂度为O(n * n x 1),即O(n^2)。\n- 对于顺序执行的语句或算法，总的时间复杂度为其中最大的时间复杂度。\n```\n    func testFunc(_ n: Int) {\n        // 第一部分时间复杂度为O(n^2)\n        for i in 0..<n {                        // 循环次数 n\n            for j in 0..<n{                     // 循环次数 n\n                print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n            }\n        }\n        // 第二部分时间复杂度为O(n)\n        for i in 0..<n {                        // 循环次数：n\n            print(\"index = \\(i)\")               // 循环体时间复杂度O(1)\n        }\n    }\n```\n\n此时时间复杂度为max(O(n^2),O(n))，即O(n^2).\n\n- 对于条件判断语句，总的时间复杂度等于其中**时间复杂度最大的路径**的时间复杂度。\n```\n    func testFunc(_ n: Int) {\n        if (n > 3) {\n            // 第一条路径复杂度为O(n^2)\n            for i in 0..<n {                        // 循环次数 n\n                for j in 0..<n{                     // 循环次数 n\n                    print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n                }\n            }\n        } else {\n            // 第二条路径时间复杂度为O(n)\n            for i in 0..<n {                        // 循环次数：n\n                print(\"index = \\(i)\")               // 循环体时间复杂度O(1)\n            }\n        }\n    }\n```\n\n此时时间复杂度为max(O(n^2),O(n))，即O(n^2)。\n\n- 二分查找的时间复杂度是O(logn)。\n\n## 时间复杂度的增长率\n\n![timg](./../images/timg.png)\n\n\n\n\n### 空间复杂度\n算法的空间复杂度是指在算法中所需要的辅助空间单元，而不包括问题的原始数据占用的空间。计算公式为：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n\n## 推荐阅读\n- [十分钟搞定时间复杂度](https://www.jianshu.com/p/f4cca5ce055a)\n","source":"_posts/时间复杂度.md","raw":"---\ntitle: 时间复杂度\ndate: 2020-08-23 13:50:17\ntags: 数据结构与算法\ncategories:\n    - 数据结构与算法\n---\n\n### 时间复杂度\n算法的时间复杂度，用来度量算法的运行时间，以算法中频度最大的语句来度量，记作: T(n) = O(f(n))，它表示随着输入大小n的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。\n\n**时间复杂度的计算**\n如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))，通常称为大O推导法。时间复杂度计算的一般法则如下：\n- 一个顺序结构的代码，时间复杂度是O(1),对于一个for循环，假设循环次数为n, 循环体的时间复杂度为O(m),那么该循环的时间复杂度为O(n * m)。如下：\n```\n    func testFunc(_ n: Int) {\n        for i in 0..<n {                // 循环次数：n\n            print(\"index = \\(i)\")       // 循环体时间复杂度O(1)\n        }\n    }\n```\n    \n    上述时间时间复杂度为O(n * 1)，即O(n).\n- 嵌套循环时，假设循环体的时间复杂度为O(n),各个循环的循环次数为a、b、c...，那么该循环侧时间复杂度为O(n * a * b * c * ...)，分析时可由内向外分析：\n```\n    func testFunc(_ n: Int) {\n        for i in 0..<n {                        // 循环次数 n\n            for j in 0..<n{                     // 循环次数 n\n                print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n            }\n        }\n    }\n```\n\n此时时间复杂度为O(n * n x 1),即O(n^2)。\n- 对于顺序执行的语句或算法，总的时间复杂度为其中最大的时间复杂度。\n```\n    func testFunc(_ n: Int) {\n        // 第一部分时间复杂度为O(n^2)\n        for i in 0..<n {                        // 循环次数 n\n            for j in 0..<n{                     // 循环次数 n\n                print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n            }\n        }\n        // 第二部分时间复杂度为O(n)\n        for i in 0..<n {                        // 循环次数：n\n            print(\"index = \\(i)\")               // 循环体时间复杂度O(1)\n        }\n    }\n```\n\n此时时间复杂度为max(O(n^2),O(n))，即O(n^2).\n\n- 对于条件判断语句，总的时间复杂度等于其中**时间复杂度最大的路径**的时间复杂度。\n```\n    func testFunc(_ n: Int) {\n        if (n > 3) {\n            // 第一条路径复杂度为O(n^2)\n            for i in 0..<n {                        // 循环次数 n\n                for j in 0..<n{                     // 循环次数 n\n                    print(\"i = \\(i) -->j = \\(j)\")   // 循环体时间复杂度O(1)\n                }\n            }\n        } else {\n            // 第二条路径时间复杂度为O(n)\n            for i in 0..<n {                        // 循环次数：n\n                print(\"index = \\(i)\")               // 循环体时间复杂度O(1)\n            }\n        }\n    }\n```\n\n此时时间复杂度为max(O(n^2),O(n))，即O(n^2)。\n\n- 二分查找的时间复杂度是O(logn)。\n\n## 时间复杂度的增长率\n\n![timg](./../images/timg.png)\n\n\n\n\n### 空间复杂度\n算法的空间复杂度是指在算法中所需要的辅助空间单元，而不包括问题的原始数据占用的空间。计算公式为：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。\n\n\n## 推荐阅读\n- [十分钟搞定时间复杂度](https://www.jianshu.com/p/f4cca5ce055a)\n","slug":"时间复杂度","published":1,"updated":"2020-08-23T06:16:49.467Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0ic20e0007n6vcqdstjcfi","content":"<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法的时间复杂度，用来度量算法的运行时间，以算法中频度最大的语句来度量，记作: T(n) = O(f(n))，它表示随着输入大小n的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p>\n<p><strong>时间复杂度的计算</strong><br>如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))，通常称为大O推导法。时间复杂度计算的一般法则如下：</p>\n<ul>\n<li>一个顺序结构的代码，时间复杂度是O(1),对于一个for循环，假设循环次数为n, 循环体的时间复杂度为O(m),那么该循环的时间复杂度为O(n * m)。如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                // 循环次数：n</span><br><span class=\"line\">        print(&quot;index = \\(i)&quot;)       // 循环体时间复杂度O(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>上述时间时间复杂度为O(n * 1)，即O(n).\n</code></pre><ul>\n<li>嵌套循环时，假设循环体的时间复杂度为O(n),各个循环的循环次数为a、b、c…，那么该循环侧时间复杂度为O(n <em> a </em> b <em> c </em> …)，分析时可由内向外分析：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">            print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为O(n * n x 1),即O(n^2)。</p>\n<ul>\n<li>对于顺序执行的语句或算法，总的时间复杂度为其中最大的时间复杂度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    // 第一部分时间复杂度为O(n^2)</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">            print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 第二部分时间复杂度为O(n)</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class=\"line\">        print(&quot;index = \\(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2).</p>\n<ul>\n<li>对于条件判断语句，总的时间复杂度等于其中<strong>时间复杂度最大的路径</strong>的时间复杂度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    if (n &gt; 3) &#123;</span><br><span class=\"line\">        // 第一条路径复杂度为O(n^2)</span><br><span class=\"line\">        for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">            for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">                print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 第二条路径时间复杂度为O(n)</span><br><span class=\"line\">        for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class=\"line\">            print(&quot;index = \\(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2)。</p>\n<ul>\n<li>二分查找的时间复杂度是O(logn)。</li>\n</ul>\n<h2 id=\"时间复杂度的增长率\"><a href=\"#时间复杂度的增长率\" class=\"headerlink\" title=\"时间复杂度的增长率\"></a>时间复杂度的增长率</h2><p><img src=\"./../images/timg.png\" alt=\"timg\"></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>算法的空间复杂度是指在算法中所需要的辅助空间单元，而不包括问题的原始数据占用的空间。计算公式为：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/f4cca5ce055a\" target=\"_blank\" rel=\"noopener\">十分钟搞定时间复杂度</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法的时间复杂度，用来度量算法的运行时间，以算法中频度最大的语句来度量，记作: T(n) = O(f(n))，它表示随着输入大小n的增大，算法执行需要的时间的增长速度可以用 f(n) 来描述。</p>\n<p><strong>时间复杂度的计算</strong><br>如果一个算法的执行次数是 T(n)，那么只保留最高次项，同时忽略最高项的系数后得到函数 f(n)，此时算法的时间复杂度就是 O(f(n))，通常称为大O推导法。时间复杂度计算的一般法则如下：</p>\n<ul>\n<li>一个顺序结构的代码，时间复杂度是O(1),对于一个for循环，假设循环次数为n, 循环体的时间复杂度为O(m),那么该循环的时间复杂度为O(n * m)。如下：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                // 循环次数：n</span><br><span class=\"line\">        print(&quot;index = \\(i)&quot;)       // 循环体时间复杂度O(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<pre><code>上述时间时间复杂度为O(n * 1)，即O(n).\n</code></pre><ul>\n<li>嵌套循环时，假设循环体的时间复杂度为O(n),各个循环的循环次数为a、b、c…，那么该循环侧时间复杂度为O(n <em> a </em> b <em> c </em> …)，分析时可由内向外分析：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">            print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为O(n * n x 1),即O(n^2)。</p>\n<ul>\n<li>对于顺序执行的语句或算法，总的时间复杂度为其中最大的时间复杂度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    // 第一部分时间复杂度为O(n^2)</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">        for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">            print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    // 第二部分时间复杂度为O(n)</span><br><span class=\"line\">    for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class=\"line\">        print(&quot;index = \\(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2).</p>\n<ul>\n<li>对于条件判断语句，总的时间复杂度等于其中<strong>时间复杂度最大的路径</strong>的时间复杂度。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func testFunc(_ n: Int) &#123;</span><br><span class=\"line\">    if (n &gt; 3) &#123;</span><br><span class=\"line\">        // 第一条路径复杂度为O(n^2)</span><br><span class=\"line\">        for i in 0..&lt;n &#123;                        // 循环次数 n</span><br><span class=\"line\">            for j in 0..&lt;n&#123;                     // 循环次数 n</span><br><span class=\"line\">                print(&quot;i = \\(i) --&gt;j = \\(j)&quot;)   // 循环体时间复杂度O(1)</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        // 第二条路径时间复杂度为O(n)</span><br><span class=\"line\">        for i in 0..&lt;n &#123;                        // 循环次数：n</span><br><span class=\"line\">            print(&quot;index = \\(i)&quot;)               // 循环体时间复杂度O(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>此时时间复杂度为max(O(n^2),O(n))，即O(n^2)。</p>\n<ul>\n<li>二分查找的时间复杂度是O(logn)。</li>\n</ul>\n<h2 id=\"时间复杂度的增长率\"><a href=\"#时间复杂度的增长率\" class=\"headerlink\" title=\"时间复杂度的增长率\"></a>时间复杂度的增长率</h2><p><img src=\"./../images/timg.png\" alt=\"timg\"></p>\n<h3 id=\"空间复杂度\"><a href=\"#空间复杂度\" class=\"headerlink\" title=\"空间复杂度\"></a>空间复杂度</h3><p>算法的空间复杂度是指在算法中所需要的辅助空间单元，而不包括问题的原始数据占用的空间。计算公式为：S(n)=O(f(n))，其中n为问题的规模，f(n)为语句关于n所占存储空间的函数。</p>\n<h2 id=\"推荐阅读\"><a href=\"#推荐阅读\" class=\"headerlink\" title=\"推荐阅读\"></a>推荐阅读</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/f4cca5ce055a\" target=\"_blank\" rel=\"noopener\">十分钟搞定时间复杂度</a></li>\n</ul>\n"},{"title":"focus","date":"2019-05-09T11:58:37.000Z","_content":"\n## 测试 哈哈哈哈😄\n","source":"_posts/focus.md","raw":"---\ntitle: focus\ndate: 2019-05-09 19:58:37\ntags:\n---\n\n## 测试 哈哈哈哈😄\n","slug":"focus","published":1,"updated":"2019-05-09T12:01:19.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0ic20h0009n6vca3ulr8zw","content":"<h2 id=\"测试-哈哈哈哈😄\"><a href=\"#测试-哈哈哈哈😄\" class=\"headerlink\" title=\"测试 哈哈哈哈😄\"></a>测试 哈哈哈哈😄</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"测试-哈哈哈哈😄\"><a href=\"#测试-哈哈哈哈😄\" class=\"headerlink\" title=\"测试 哈哈哈哈😄\"></a>测试 哈哈哈哈😄</h2>"},{"title":"数据结构与算法","date":"2020-08-30T01:30:10.000Z","_content":"\n数据结构是指同一数据对象中各数据元素间存在的关系。算法是解决某一特定类型问题的有限运算序列，算法的实现必须借助程序设计语言中提供的数据类型及其运算。一个算法的效率往往与数据的表现形式有关，因此数据结构的选择对数据处理的效率起着至关重要的作用。\n\n# 基础入门篇\n\n作为一名iOSer，综合考虑了下，决定还是选择Swift作为学习算法的主要语言。一方面有Swift语言基础，能够减少算法学习的前期准备成本，另一方面，通过算法的练习，提升对Swift语言的熟练度。\n\n## Swift语言入门\n**基础语法**\n\n[SwiftGG-The Swift Programming Language](https://swiftgg.gitbook.io/swift/)\n\n# 数据结构篇\n## 数组\n数组是最基本的数据结构，可以在内存中连续存储多个相同元素，在内存中的分配也是连续的，数组中的元素通过下标进行访问，下标从0开始。在Swift中，将OC时代的NSMutableArray和NSArray统一归为Array。虽然看上去只有一种数据结构，但是它的实现其实有三种：\n- **ContiguousArray<Element>**：是一个比较特殊的数组，会将对应的数组存储在连续的内存区域中。如果存储的元素是结构体或枚举（值类型，栈上操作），那么`Array`和`ContiguousArray`的效率相似；如果数组中存储的元素是对象（`class`或`@objc`），而且不需要将数组桥接到Array或者传递给`Objective-C`的`API`时，那么`ContiguousArray`比`Array`更高效，而且拥有更多可预测的性能。\n\n- **Array<Element>**：当存储值类型时，性能和`ContiguousArray`无差别，而且内存是连续的。但是如果存储的是对象（`class`或`@objc`），则会自动桥接到`Objective-C`中的`NSArray`。\n\n- **ArraySlice<Element>**：不是数组，而是数组片段，与原数组享用同一区域，不创建新的存储空间。但是，修改ArraySlice中的元素时，不会影响到原数组。\n\n\n### 数组中的count和capacity\n\nSwift中Array的count属性用于描述数组中元素的个数，而capacity用于描述数组的容量，即不分配新存储空间的数组可以包含的元素总数。如果要向数组中增加元素，并且超过其容量，则该数组必须增加其容量。为了提高数组的扩容效率，数组的容量的大小都是成倍增长，如：\n\n```\nvar cArr = ContiguousArray<Any>(repeating: 3, count: 2)\nprint(cArr.count)       // 2\nprint(cArr.capacity)    // 2\ncArr.append(1)\nprint(cArr.capacity)    // 4\ncArr.append(2)\nprint(cArr.capacity)    // 4\ncArr.append(3)\nprint(cArr.capacity)    // 8        \n// 当调用removeAll时，数组的所有空间被释放\ncArr.removeAll()\nprint(cArr.count)       // 0\nprint(cArr.capacity)    // 0\n```\n\n由于Swift数组将其元素连续存储在内存中，因此必须通过通过重新分配其内部存储，并且将所有元素从原先的存储中复制到新的存储中。如果事先知道需要向数组汇总添加多少个元素，则可使用`reserveCapacity`方法来预设数组中的容量，以减少数组`capacity`变化带来的影响。\n\n```\nvar cArr = ContiguousArray<Any>(repeating: 3, count: 2)\ncArr.reserveCapacity(10) // 10\n```\n\n通常无需担心数组容量的问题，重新分配很少影响性能问题，Swift使用有效的重新分配方式，以便重新分配的数组在最终计数中为对数。但是如果数组非常大（例如，Mac上为千兆字节或iOS设备上为数十兆字节），或者对性能敏感的数据存入数组（音频缓冲区，需要几秒内播放），则需要考虑使用reserveCapacity避免重新分配。\n\n#### ArraySlice注意点\n\nArraySlice是Array，ContiguousArray的一个切片或ArraySlice实例。ArraySlice并没有将切片的元素拷贝到新的内存中。修改ArraySlice中的值不会引起原数组的改变，同样，原数组的值修改，也不会引起ArraySlice的变化。如：\n\n```\nlet testArr = Array(1...7)\nlet middle = testArr.count / 2\nvar firstHalf = testArr[..<middle]\nlet secondHalf = testArr[middle...]\nfirstHalf[0] = 10\nprint(secondHalf.startIndex) // 3\nprint(testArr)               // [1, 2, 3, 4, 5, 6, 7]\nprint(firstHalf)             // [10, 2, 3]\ntestArr[0] = 20\nprint(firstHalf)             // [10, 2, 3]\nprint(testArr)               // [20, 2, 3, 4, 5, 6, 7]\n```\nArraySlice的索引并总是从0开始,而是按照原数据中的索引。\n\n```\nprint(secondHalf.startIndex) // 3\nprint(secondHalf[0])  // Fatal error: Index out of bounds\n```\n\n>Apple官方文档中指出不建议长期存储实例。因为即使原始数组的生命周期结束后，切片也会保留对较大数组整个存储的引用，而不仅仅是对其呈现的部分的引用。因此，切片的长期存储可能会延长原本无法访问的元素的寿命，这些元素似乎是内存和对象泄漏。\n\n### 数组中的常见操作\n- 数组的声明\n```\n    // 声明一个可变数组\n    var arr1 = Array<Int>()\n    var arr2 = [Int]()    //推荐使用\n    // 声明一个不可修改的数组\n    let arr3 = [1,2,3]\n    let arr4 = [Int](repeating: 0, count: 3)\n```\n- 增加一个元素\n```\n    arr1.append(1)\n    或\n    arr1 += [1]\n```\n- 删除一个元素\n```\n    arr1.remove(at: 0)\n```\n- 修改一个元素\n```\n    arr1[1] = 6\n```\n- 取出一个元素\n```\n    var value = arr1[0]\n```\n\n- 遍历\n\n常用方式一：**forEach**\n\n```\narr1.forEach { (value) in\n    print(value)\n}\n```\n常用方式二：**for...in**\n```\n \nfor i in 0..<arr1.count - 1 {\n    print(i)\n}\n\n// 枚举遍历\nfor (index, value) in arr1.enumerated() {\n    print(\"\\(index): '\\(value)'\")\n}\n\n```\n\n区别：\n\n\n\n\n\n\n\n\n## 字典与集合\n\n\n\n## 字符串\n\n## 栈和队列\n\n## 链表\n## 二叉树\n\n\n# 基础算法篇\n二分查找，排序算法， 动态规划\n\n# 算法思维篇\n\n数据结构和算法思维的目的都是为了降低时间复杂度。数据结构是从数据组织形式的角度去达成这个目标，而算法思维则是从数据处理的思路上去达成这个目标。如果数据处理的逻辑上出现缺陷，即使通过高效的数据处理解决了问题，但是会产生很多无效的计算，造成时间浪费。\n\n\n## 排序\n>排序是指让一组无序数据变成有序的过程，一般默认有序为从小到大的排列顺序。\n\n**衡量排序算法优劣的方式**\n- 时间复杂度\n    - 包括最好时间复杂度、最坏时间复杂度和平均时间复杂度。\n- 空间复杂度\n    - 如果空间复杂度为1，也称为原地排序。\n- 稳定性\n    - 指相等的数据对象，在排序后，顺序是否保持不变。\n\n### 冒泡排序\n**原理**\n从第一个数据开始，依次比较相邻元素的大小，如果前者大于后者，这交换两个元素的位置，将大的元素排到后面，通过多轮迭代，直到不用交换为止。\n\n**性能**\n- **时间复杂度**\n    - 最好时间复杂度：**O(n)**\n        - 即当数据刚好是顺序排序时，只要挨个比较一般即可。\n    - 最坏时间复杂度：**O(n*n)**\n        - 即当数据刚好逆序时，每轮排序都需要比较n次，并且重复n次。\n    - 平均时间复杂度: **O(n*n)**\n        - 即数据杂乱无章时\n- **空间复杂度**\n    - **O(1)**：不占用额外的空间\n    \n**代码实现**\n  ```\n    // 冒泡排序(Swift)\n    func bubbleSort() {\n        var list = [-1,2,4,1,0,9,6,7]\n        for i in 1..<list.count {\n            for j in 0..<(i - 1) {\n                if list[j] > list[j + 1] {\n                    let temp = list[j]\n                    list[j] = list[j + 1]\n                    list[j+1] = temp\n                }\n            }\n        }\n        print(list)\n    }\n  ```\n  \n  \n### 插入排序\n**原理**\n选取未排序的数据插入到已排序区间的合适位置，直到未排序区间为空。\n\n**性能**\n- **时间复杂度**\n    - 最好时间复杂度：**O(n)**\n        - 即当数据刚好是顺序排序时，每次只用比较一次就能找到正确的位置。\n    - 最坏时间复杂度：**O(n*n)**\n        - 即当数据刚好完全逆序时，每轮排序都需要比较n次才能找到正确的位置区间。\n    - 平均时间复杂度: **O(n*n)**\n        - 因为往数组中插入一个元素的平均时间复杂度为O(n),而插入排序可以理解为重复n次的数组插入操作\n- **空间复杂度**\n    - **O(1)**：不占用额外的空间。\n\n\n## 查找\n\n### 二分查找\n- 二分查找的时间复杂度是O(logn)。\n- 二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。因此编码的时候，多数采用while循环加break跳出代码结构。\n- 二分查找处理的原问题必须是有序的。\n\n### 二叉树搜索\n\n## 递归思维\n>递归是指在函数的定义中使用函数自身的方法，即自己调用自己。递归的基本思想就是把规模大的问题转化为规模小的相同的子问题来解决。递归的实现包含两部分，一是递归主体，而是终止条件。\n\n递归的数学模型是[数学归纳法](https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95)。当一个问题满足如下的两个条件时，就可以使用递归的方法求解：\n- 1、可以拆解为除了数据规模之外，求解思路完全相同的方法求解；\n- 2、存在终止条件。\n\n递归的核心思想是把规模大的问题转化为规模小的相似的子问题来解决。\n例子：通过递归求解汉诺塔问题：\n```\nfunc hannio(n: Int, x: String, y: String, z: String) {\n    if n < 1 {\n        print(\"汉诺塔的层数不能小于1\")\n    } else if (n == 1) {\n        print(\"移动：\" + x + \"->\" + z)\n    }\n    else {\n        hannio(n: n - 1, x: x, y: z, z: y)\n        print(\"移动：\" + x + \"->\" + z)\n        hannio(n: n - 1, x: y, y: x, z: z)\n    }\n}\n```\n\n## 分治法\n>分治法的核心思想是“分而治之”，就是把一个规模大、高难度的问题，分解为若干个小规模、低难度的小问题，再针对小的问题，逐一击破。\n\n### 分治法的使用方法\n当使用分治法解决问题时，一般原问题都需要具备以下几个特征：\n- **1、难度在降低**：即原问题的解决难度，随着数据的规模的缩小而降低。\n- **2、问题可分**：原问题可以分解为若干个规模较小的同类型问题。\n- **3、解可合并**：利用所有子问题的解，可合并出原问题的解。\n- **4、相互独立**：各个子问题之间相互独立，某个子问题的求解不会影响到另一个子问题。如果子问题之间不独立，则分治法需要重复地解决公共的子问题，造成效率低下的结果。\n\n分治法的常见实例为二分查找。二分查找的步骤如下：\n- 1、选择一个标志i将集合L分为二个子集，一般为中位数；\n- 2、判断标志L(i)是否能够与要查找的值des相等，相等则直接返回结果；\n- 3、如果不相等，需要判断L(i)与des的大小；\n- 4、基于判断的结果决定下不步是向左查找还是向右查找。如果向某个方向查找的空间为0，则返回结果未找到。\n- 5、回到步骤1。\n二分查找最差的情况是找到最后一个数字才完成，那么此时的最大的复杂度为O(logn)。\n分治法的例子：在有序数组[1,2,3,4,5,6,7,8,9]中查找8有没有出现过：\n\n```\nfunc findValue(_ list:[Int], _ targrt:Int) -> Bool {\n    var middle = 0, low = 0, high = list.count - 1\n    var isFind = false\n    while (low < high) {\n        middle = (high + low) / 2\n        if list[middle] == targrt {\n            print(String(format: \"😄找到了,哈哈哈,index:%@\", String(middle)))\n            isFind = true\n            break\n        } else if (list[middle] > targrt) {\n            // 说明在左侧 low -> middle - 1之间\n            high = middle - 1\n        } else {\n            // 说明在右侧 middle -> high 之间\n            low = middle + 1\n        }\n    }\n    if !isFind {\n        print(\"😠没找到，呜呜呜呜\")\n    }\n    return isFind\n}\n```\n**规律**\n    \n- 二分法查找的时间复杂度是O(logn)，这也是分治法普遍具备的特征。当约束了时间复杂度为O(logn)或O(nlogn)时，可以考虑分治法是否可行。\n- 二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。通常采用while循环加break的代码结构\n- 二分查找处理的原问题必须是有序的。\n\n## 动态规划\n>动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，需要因题而异，仔细分析问题并寻找解决方案。\n\n\n## 感谢与推荐\n- [重学数据结构与算法](https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185#/content)\n- [algorithm-pattern](https://greyireland.gitbook.io/algorithm-pattern/)\n- [冰霜LeetCodeCookBook](https://books.halfrost.com/leetcode/)\n- [LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)\n","source":"_posts/数据结构与算法.md","raw":"---\ntitle: 数据结构与算法\ndate: 2020-08-30 09:30:10\ntags: 数据结构与算法\n---\n\n数据结构是指同一数据对象中各数据元素间存在的关系。算法是解决某一特定类型问题的有限运算序列，算法的实现必须借助程序设计语言中提供的数据类型及其运算。一个算法的效率往往与数据的表现形式有关，因此数据结构的选择对数据处理的效率起着至关重要的作用。\n\n# 基础入门篇\n\n作为一名iOSer，综合考虑了下，决定还是选择Swift作为学习算法的主要语言。一方面有Swift语言基础，能够减少算法学习的前期准备成本，另一方面，通过算法的练习，提升对Swift语言的熟练度。\n\n## Swift语言入门\n**基础语法**\n\n[SwiftGG-The Swift Programming Language](https://swiftgg.gitbook.io/swift/)\n\n# 数据结构篇\n## 数组\n数组是最基本的数据结构，可以在内存中连续存储多个相同元素，在内存中的分配也是连续的，数组中的元素通过下标进行访问，下标从0开始。在Swift中，将OC时代的NSMutableArray和NSArray统一归为Array。虽然看上去只有一种数据结构，但是它的实现其实有三种：\n- **ContiguousArray<Element>**：是一个比较特殊的数组，会将对应的数组存储在连续的内存区域中。如果存储的元素是结构体或枚举（值类型，栈上操作），那么`Array`和`ContiguousArray`的效率相似；如果数组中存储的元素是对象（`class`或`@objc`），而且不需要将数组桥接到Array或者传递给`Objective-C`的`API`时，那么`ContiguousArray`比`Array`更高效，而且拥有更多可预测的性能。\n\n- **Array<Element>**：当存储值类型时，性能和`ContiguousArray`无差别，而且内存是连续的。但是如果存储的是对象（`class`或`@objc`），则会自动桥接到`Objective-C`中的`NSArray`。\n\n- **ArraySlice<Element>**：不是数组，而是数组片段，与原数组享用同一区域，不创建新的存储空间。但是，修改ArraySlice中的元素时，不会影响到原数组。\n\n\n### 数组中的count和capacity\n\nSwift中Array的count属性用于描述数组中元素的个数，而capacity用于描述数组的容量，即不分配新存储空间的数组可以包含的元素总数。如果要向数组中增加元素，并且超过其容量，则该数组必须增加其容量。为了提高数组的扩容效率，数组的容量的大小都是成倍增长，如：\n\n```\nvar cArr = ContiguousArray<Any>(repeating: 3, count: 2)\nprint(cArr.count)       // 2\nprint(cArr.capacity)    // 2\ncArr.append(1)\nprint(cArr.capacity)    // 4\ncArr.append(2)\nprint(cArr.capacity)    // 4\ncArr.append(3)\nprint(cArr.capacity)    // 8        \n// 当调用removeAll时，数组的所有空间被释放\ncArr.removeAll()\nprint(cArr.count)       // 0\nprint(cArr.capacity)    // 0\n```\n\n由于Swift数组将其元素连续存储在内存中，因此必须通过通过重新分配其内部存储，并且将所有元素从原先的存储中复制到新的存储中。如果事先知道需要向数组汇总添加多少个元素，则可使用`reserveCapacity`方法来预设数组中的容量，以减少数组`capacity`变化带来的影响。\n\n```\nvar cArr = ContiguousArray<Any>(repeating: 3, count: 2)\ncArr.reserveCapacity(10) // 10\n```\n\n通常无需担心数组容量的问题，重新分配很少影响性能问题，Swift使用有效的重新分配方式，以便重新分配的数组在最终计数中为对数。但是如果数组非常大（例如，Mac上为千兆字节或iOS设备上为数十兆字节），或者对性能敏感的数据存入数组（音频缓冲区，需要几秒内播放），则需要考虑使用reserveCapacity避免重新分配。\n\n#### ArraySlice注意点\n\nArraySlice是Array，ContiguousArray的一个切片或ArraySlice实例。ArraySlice并没有将切片的元素拷贝到新的内存中。修改ArraySlice中的值不会引起原数组的改变，同样，原数组的值修改，也不会引起ArraySlice的变化。如：\n\n```\nlet testArr = Array(1...7)\nlet middle = testArr.count / 2\nvar firstHalf = testArr[..<middle]\nlet secondHalf = testArr[middle...]\nfirstHalf[0] = 10\nprint(secondHalf.startIndex) // 3\nprint(testArr)               // [1, 2, 3, 4, 5, 6, 7]\nprint(firstHalf)             // [10, 2, 3]\ntestArr[0] = 20\nprint(firstHalf)             // [10, 2, 3]\nprint(testArr)               // [20, 2, 3, 4, 5, 6, 7]\n```\nArraySlice的索引并总是从0开始,而是按照原数据中的索引。\n\n```\nprint(secondHalf.startIndex) // 3\nprint(secondHalf[0])  // Fatal error: Index out of bounds\n```\n\n>Apple官方文档中指出不建议长期存储实例。因为即使原始数组的生命周期结束后，切片也会保留对较大数组整个存储的引用，而不仅仅是对其呈现的部分的引用。因此，切片的长期存储可能会延长原本无法访问的元素的寿命，这些元素似乎是内存和对象泄漏。\n\n### 数组中的常见操作\n- 数组的声明\n```\n    // 声明一个可变数组\n    var arr1 = Array<Int>()\n    var arr2 = [Int]()    //推荐使用\n    // 声明一个不可修改的数组\n    let arr3 = [1,2,3]\n    let arr4 = [Int](repeating: 0, count: 3)\n```\n- 增加一个元素\n```\n    arr1.append(1)\n    或\n    arr1 += [1]\n```\n- 删除一个元素\n```\n    arr1.remove(at: 0)\n```\n- 修改一个元素\n```\n    arr1[1] = 6\n```\n- 取出一个元素\n```\n    var value = arr1[0]\n```\n\n- 遍历\n\n常用方式一：**forEach**\n\n```\narr1.forEach { (value) in\n    print(value)\n}\n```\n常用方式二：**for...in**\n```\n \nfor i in 0..<arr1.count - 1 {\n    print(i)\n}\n\n// 枚举遍历\nfor (index, value) in arr1.enumerated() {\n    print(\"\\(index): '\\(value)'\")\n}\n\n```\n\n区别：\n\n\n\n\n\n\n\n\n## 字典与集合\n\n\n\n## 字符串\n\n## 栈和队列\n\n## 链表\n## 二叉树\n\n\n# 基础算法篇\n二分查找，排序算法， 动态规划\n\n# 算法思维篇\n\n数据结构和算法思维的目的都是为了降低时间复杂度。数据结构是从数据组织形式的角度去达成这个目标，而算法思维则是从数据处理的思路上去达成这个目标。如果数据处理的逻辑上出现缺陷，即使通过高效的数据处理解决了问题，但是会产生很多无效的计算，造成时间浪费。\n\n\n## 排序\n>排序是指让一组无序数据变成有序的过程，一般默认有序为从小到大的排列顺序。\n\n**衡量排序算法优劣的方式**\n- 时间复杂度\n    - 包括最好时间复杂度、最坏时间复杂度和平均时间复杂度。\n- 空间复杂度\n    - 如果空间复杂度为1，也称为原地排序。\n- 稳定性\n    - 指相等的数据对象，在排序后，顺序是否保持不变。\n\n### 冒泡排序\n**原理**\n从第一个数据开始，依次比较相邻元素的大小，如果前者大于后者，这交换两个元素的位置，将大的元素排到后面，通过多轮迭代，直到不用交换为止。\n\n**性能**\n- **时间复杂度**\n    - 最好时间复杂度：**O(n)**\n        - 即当数据刚好是顺序排序时，只要挨个比较一般即可。\n    - 最坏时间复杂度：**O(n*n)**\n        - 即当数据刚好逆序时，每轮排序都需要比较n次，并且重复n次。\n    - 平均时间复杂度: **O(n*n)**\n        - 即数据杂乱无章时\n- **空间复杂度**\n    - **O(1)**：不占用额外的空间\n    \n**代码实现**\n  ```\n    // 冒泡排序(Swift)\n    func bubbleSort() {\n        var list = [-1,2,4,1,0,9,6,7]\n        for i in 1..<list.count {\n            for j in 0..<(i - 1) {\n                if list[j] > list[j + 1] {\n                    let temp = list[j]\n                    list[j] = list[j + 1]\n                    list[j+1] = temp\n                }\n            }\n        }\n        print(list)\n    }\n  ```\n  \n  \n### 插入排序\n**原理**\n选取未排序的数据插入到已排序区间的合适位置，直到未排序区间为空。\n\n**性能**\n- **时间复杂度**\n    - 最好时间复杂度：**O(n)**\n        - 即当数据刚好是顺序排序时，每次只用比较一次就能找到正确的位置。\n    - 最坏时间复杂度：**O(n*n)**\n        - 即当数据刚好完全逆序时，每轮排序都需要比较n次才能找到正确的位置区间。\n    - 平均时间复杂度: **O(n*n)**\n        - 因为往数组中插入一个元素的平均时间复杂度为O(n),而插入排序可以理解为重复n次的数组插入操作\n- **空间复杂度**\n    - **O(1)**：不占用额外的空间。\n\n\n## 查找\n\n### 二分查找\n- 二分查找的时间复杂度是O(logn)。\n- 二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。因此编码的时候，多数采用while循环加break跳出代码结构。\n- 二分查找处理的原问题必须是有序的。\n\n### 二叉树搜索\n\n## 递归思维\n>递归是指在函数的定义中使用函数自身的方法，即自己调用自己。递归的基本思想就是把规模大的问题转化为规模小的相同的子问题来解决。递归的实现包含两部分，一是递归主体，而是终止条件。\n\n递归的数学模型是[数学归纳法](https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95)。当一个问题满足如下的两个条件时，就可以使用递归的方法求解：\n- 1、可以拆解为除了数据规模之外，求解思路完全相同的方法求解；\n- 2、存在终止条件。\n\n递归的核心思想是把规模大的问题转化为规模小的相似的子问题来解决。\n例子：通过递归求解汉诺塔问题：\n```\nfunc hannio(n: Int, x: String, y: String, z: String) {\n    if n < 1 {\n        print(\"汉诺塔的层数不能小于1\")\n    } else if (n == 1) {\n        print(\"移动：\" + x + \"->\" + z)\n    }\n    else {\n        hannio(n: n - 1, x: x, y: z, z: y)\n        print(\"移动：\" + x + \"->\" + z)\n        hannio(n: n - 1, x: y, y: x, z: z)\n    }\n}\n```\n\n## 分治法\n>分治法的核心思想是“分而治之”，就是把一个规模大、高难度的问题，分解为若干个小规模、低难度的小问题，再针对小的问题，逐一击破。\n\n### 分治法的使用方法\n当使用分治法解决问题时，一般原问题都需要具备以下几个特征：\n- **1、难度在降低**：即原问题的解决难度，随着数据的规模的缩小而降低。\n- **2、问题可分**：原问题可以分解为若干个规模较小的同类型问题。\n- **3、解可合并**：利用所有子问题的解，可合并出原问题的解。\n- **4、相互独立**：各个子问题之间相互独立，某个子问题的求解不会影响到另一个子问题。如果子问题之间不独立，则分治法需要重复地解决公共的子问题，造成效率低下的结果。\n\n分治法的常见实例为二分查找。二分查找的步骤如下：\n- 1、选择一个标志i将集合L分为二个子集，一般为中位数；\n- 2、判断标志L(i)是否能够与要查找的值des相等，相等则直接返回结果；\n- 3、如果不相等，需要判断L(i)与des的大小；\n- 4、基于判断的结果决定下不步是向左查找还是向右查找。如果向某个方向查找的空间为0，则返回结果未找到。\n- 5、回到步骤1。\n二分查找最差的情况是找到最后一个数字才完成，那么此时的最大的复杂度为O(logn)。\n分治法的例子：在有序数组[1,2,3,4,5,6,7,8,9]中查找8有没有出现过：\n\n```\nfunc findValue(_ list:[Int], _ targrt:Int) -> Bool {\n    var middle = 0, low = 0, high = list.count - 1\n    var isFind = false\n    while (low < high) {\n        middle = (high + low) / 2\n        if list[middle] == targrt {\n            print(String(format: \"😄找到了,哈哈哈,index:%@\", String(middle)))\n            isFind = true\n            break\n        } else if (list[middle] > targrt) {\n            // 说明在左侧 low -> middle - 1之间\n            high = middle - 1\n        } else {\n            // 说明在右侧 middle -> high 之间\n            low = middle + 1\n        }\n    }\n    if !isFind {\n        print(\"😠没找到，呜呜呜呜\")\n    }\n    return isFind\n}\n```\n**规律**\n    \n- 二分法查找的时间复杂度是O(logn)，这也是分治法普遍具备的特征。当约束了时间复杂度为O(logn)或O(nlogn)时，可以考虑分治法是否可行。\n- 二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。通常采用while循环加break的代码结构\n- 二分查找处理的原问题必须是有序的。\n\n## 动态规划\n>动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，需要因题而异，仔细分析问题并寻找解决方案。\n\n\n## 感谢与推荐\n- [重学数据结构与算法](https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185#/content)\n- [algorithm-pattern](https://greyireland.gitbook.io/algorithm-pattern/)\n- [冰霜LeetCodeCookBook](https://books.halfrost.com/leetcode/)\n- [LeetCodeAnimation](https://github.com/MisterBooo/LeetCodeAnimation)\n","slug":"数据结构与算法","published":1,"updated":"2020-09-06T14:25:41.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckf0ic218000in6vc0c587xiy","content":"<p>数据结构是指同一数据对象中各数据元素间存在的关系。算法是解决某一特定类型问题的有限运算序列，算法的实现必须借助程序设计语言中提供的数据类型及其运算。一个算法的效率往往与数据的表现形式有关，因此数据结构的选择对数据处理的效率起着至关重要的作用。</p>\n<h1 id=\"基础入门篇\"><a href=\"#基础入门篇\" class=\"headerlink\" title=\"基础入门篇\"></a>基础入门篇</h1><p>作为一名iOSer，综合考虑了下，决定还是选择Swift作为学习算法的主要语言。一方面有Swift语言基础，能够减少算法学习的前期准备成本，另一方面，通过算法的练习，提升对Swift语言的熟练度。</p>\n<h2 id=\"Swift语言入门\"><a href=\"#Swift语言入门\" class=\"headerlink\" title=\"Swift语言入门\"></a>Swift语言入门</h2><p><strong>基础语法</strong></p>\n<p><a href=\"https://swiftgg.gitbook.io/swift/\" target=\"_blank\" rel=\"noopener\">SwiftGG-The Swift Programming Language</a></p>\n<h1 id=\"数据结构篇\"><a href=\"#数据结构篇\" class=\"headerlink\" title=\"数据结构篇\"></a>数据结构篇</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数组是最基本的数据结构，可以在内存中连续存储多个相同元素，在内存中的分配也是连续的，数组中的元素通过下标进行访问，下标从0开始。在Swift中，将OC时代的NSMutableArray和NSArray统一归为Array。虽然看上去只有一种数据结构，但是它的实现其实有三种：</p>\n<ul>\n<li><p><strong>ContiguousArray<element></element></strong>：是一个比较特殊的数组，会将对应的数组存储在连续的内存区域中。如果存储的元素是结构体或枚举（值类型，栈上操作），那么<code>Array</code>和<code>ContiguousArray</code>的效率相似；如果数组中存储的元素是对象（<code>class</code>或<code>@objc</code>），而且不需要将数组桥接到Array或者传递给<code>Objective-C</code>的<code>API</code>时，那么<code>ContiguousArray</code>比<code>Array</code>更高效，而且拥有更多可预测的性能。</p>\n</li>\n<li><p><strong>Array<element></element></strong>：当存储值类型时，性能和<code>ContiguousArray</code>无差别，而且内存是连续的。但是如果存储的是对象（<code>class</code>或<code>@objc</code>），则会自动桥接到<code>Objective-C</code>中的<code>NSArray</code>。</p>\n</li>\n<li><p><strong>ArraySlice<element></element></strong>：不是数组，而是数组片段，与原数组享用同一区域，不创建新的存储空间。但是，修改ArraySlice中的元素时，不会影响到原数组。</p>\n</li>\n</ul>\n<h3 id=\"数组中的count和capacity\"><a href=\"#数组中的count和capacity\" class=\"headerlink\" title=\"数组中的count和capacity\"></a>数组中的count和capacity</h3><p>Swift中Array的count属性用于描述数组中元素的个数，而capacity用于描述数组的容量，即不分配新存储空间的数组可以包含的元素总数。如果要向数组中增加元素，并且超过其容量，则该数组必须增加其容量。为了提高数组的扩容效率，数组的容量的大小都是成倍增长，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class=\"line\">print(cArr.count)       // 2</span><br><span class=\"line\">print(cArr.capacity)    // 2</span><br><span class=\"line\">cArr.append(1)</span><br><span class=\"line\">print(cArr.capacity)    // 4</span><br><span class=\"line\">cArr.append(2)</span><br><span class=\"line\">print(cArr.capacity)    // 4</span><br><span class=\"line\">cArr.append(3)</span><br><span class=\"line\">print(cArr.capacity)    // 8        </span><br><span class=\"line\">// 当调用removeAll时，数组的所有空间被释放</span><br><span class=\"line\">cArr.removeAll()</span><br><span class=\"line\">print(cArr.count)       // 0</span><br><span class=\"line\">print(cArr.capacity)    // 0</span><br></pre></td></tr></table></figure>\n<p>由于Swift数组将其元素连续存储在内存中，因此必须通过通过重新分配其内部存储，并且将所有元素从原先的存储中复制到新的存储中。如果事先知道需要向数组汇总添加多少个元素，则可使用<code>reserveCapacity</code>方法来预设数组中的容量，以减少数组<code>capacity</code>变化带来的影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class=\"line\">cArr.reserveCapacity(10) // 10</span><br></pre></td></tr></table></figure>\n<p>通常无需担心数组容量的问题，重新分配很少影响性能问题，Swift使用有效的重新分配方式，以便重新分配的数组在最终计数中为对数。但是如果数组非常大（例如，Mac上为千兆字节或iOS设备上为数十兆字节），或者对性能敏感的数据存入数组（音频缓冲区，需要几秒内播放），则需要考虑使用reserveCapacity避免重新分配。</p>\n<h4 id=\"ArraySlice注意点\"><a href=\"#ArraySlice注意点\" class=\"headerlink\" title=\"ArraySlice注意点\"></a>ArraySlice注意点</h4><p>ArraySlice是Array，ContiguousArray的一个切片或ArraySlice实例。ArraySlice并没有将切片的元素拷贝到新的内存中。修改ArraySlice中的值不会引起原数组的改变，同样，原数组的值修改，也不会引起ArraySlice的变化。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let testArr = Array(1...7)</span><br><span class=\"line\">let middle = testArr.count / 2</span><br><span class=\"line\">var firstHalf = testArr[..&lt;middle]</span><br><span class=\"line\">let secondHalf = testArr[middle...]</span><br><span class=\"line\">firstHalf[0] = 10</span><br><span class=\"line\">print(secondHalf.startIndex) // 3</span><br><span class=\"line\">print(testArr)               // [1, 2, 3, 4, 5, 6, 7]</span><br><span class=\"line\">print(firstHalf)             // [10, 2, 3]</span><br><span class=\"line\">testArr[0] = 20</span><br><span class=\"line\">print(firstHalf)             // [10, 2, 3]</span><br><span class=\"line\">print(testArr)               // [20, 2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure>\n<p>ArraySlice的索引并总是从0开始,而是按照原数据中的索引。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(secondHalf.startIndex) // 3</span><br><span class=\"line\">print(secondHalf[0])  // Fatal error: Index out of bounds</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Apple官方文档中指出不建议长期存储实例。因为即使原始数组的生命周期结束后，切片也会保留对较大数组整个存储的引用，而不仅仅是对其呈现的部分的引用。因此，切片的长期存储可能会延长原本无法访问的元素的寿命，这些元素似乎是内存和对象泄漏。</p>\n</blockquote>\n<h3 id=\"数组中的常见操作\"><a href=\"#数组中的常见操作\" class=\"headerlink\" title=\"数组中的常见操作\"></a>数组中的常见操作</h3><ul>\n<li><p>数组的声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明一个可变数组</span><br><span class=\"line\">var arr1 = Array&lt;Int&gt;()</span><br><span class=\"line\">var arr2 = [Int]()    //推荐使用</span><br><span class=\"line\">// 声明一个不可修改的数组</span><br><span class=\"line\">let arr3 = [1,2,3]</span><br><span class=\"line\">let arr4 = [Int](repeating: 0, count: 3)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.append(1)</span><br><span class=\"line\">或</span><br><span class=\"line\">arr1 += [1]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.remove(at: 0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1[1] = 6</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取出一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value = arr1[0]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历</p>\n</li>\n</ul>\n<p>常用方式一：<strong>forEach</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.forEach &#123; (value) in</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用方式二：<strong>for…in</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">for i in 0..&lt;arr1.count - 1 &#123;</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 枚举遍历</span><br><span class=\"line\">for (index, value) in arr1.enumerated() &#123;</span><br><span class=\"line\">    print(&quot;\\(index): &apos;\\(value)&apos;&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>区别：</p>\n<h2 id=\"字典与集合\"><a href=\"#字典与集合\" class=\"headerlink\" title=\"字典与集合\"></a>字典与集合</h2><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h1 id=\"基础算法篇\"><a href=\"#基础算法篇\" class=\"headerlink\" title=\"基础算法篇\"></a>基础算法篇</h1><p>二分查找，排序算法， 动态规划</p>\n<h1 id=\"算法思维篇\"><a href=\"#算法思维篇\" class=\"headerlink\" title=\"算法思维篇\"></a>算法思维篇</h1><p>数据结构和算法思维的目的都是为了降低时间复杂度。数据结构是从数据组织形式的角度去达成这个目标，而算法思维则是从数据处理的思路上去达成这个目标。如果数据处理的逻辑上出现缺陷，即使通过高效的数据处理解决了问题，但是会产生很多无效的计算，造成时间浪费。</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><blockquote>\n<p>排序是指让一组无序数据变成有序的过程，一般默认有序为从小到大的排列顺序。</p>\n</blockquote>\n<p><strong>衡量排序算法优劣的方式</strong></p>\n<ul>\n<li>时间复杂度<ul>\n<li>包括最好时间复杂度、最坏时间复杂度和平均时间复杂度。</li>\n</ul>\n</li>\n<li>空间复杂度<ul>\n<li>如果空间复杂度为1，也称为原地排序。</li>\n</ul>\n</li>\n<li>稳定性<ul>\n<li>指相等的数据对象，在排序后，顺序是否保持不变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><strong>原理</strong><br>从第一个数据开始，依次比较相邻元素的大小，如果前者大于后者，这交换两个元素的位置，将大的元素排到后面，通过多轮迭代，直到不用交换为止。</p>\n<p><strong>性能</strong></p>\n<ul>\n<li><strong>时间复杂度</strong><ul>\n<li>最好时间复杂度：<strong>O(n)</strong><ul>\n<li>即当数据刚好是顺序排序时，只要挨个比较一般即可。</li>\n</ul>\n</li>\n<li>最坏时间复杂度：<strong>O(n*n)</strong><ul>\n<li>即当数据刚好逆序时，每轮排序都需要比较n次，并且重复n次。</li>\n</ul>\n</li>\n<li>平均时间复杂度: <strong>O(n*n)</strong><ul>\n<li>即数据杂乱无章时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>空间复杂度</strong><ul>\n<li><strong>O(1)</strong>：不占用额外的空间</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码实现</strong><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 冒泡排序(Swift)</span><br><span class=\"line\">func bubbleSort() &#123;</span><br><span class=\"line\">    var list = [-1,2,4,1,0,9,6,7]</span><br><span class=\"line\">    for i in 1..&lt;list.count &#123;</span><br><span class=\"line\">        for j in 0..&lt;(i - 1) &#123;</span><br><span class=\"line\">            if list[j] &gt; list[j + 1] &#123;</span><br><span class=\"line\">                let temp = list[j]</span><br><span class=\"line\">                list[j] = list[j + 1]</span><br><span class=\"line\">                list[j+1] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(list)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><strong>原理</strong><br>选取未排序的数据插入到已排序区间的合适位置，直到未排序区间为空。</p>\n<p><strong>性能</strong></p>\n<ul>\n<li><strong>时间复杂度</strong><ul>\n<li>最好时间复杂度：<strong>O(n)</strong><ul>\n<li>即当数据刚好是顺序排序时，每次只用比较一次就能找到正确的位置。</li>\n</ul>\n</li>\n<li>最坏时间复杂度：<strong>O(n*n)</strong><ul>\n<li>即当数据刚好完全逆序时，每轮排序都需要比较n次才能找到正确的位置区间。</li>\n</ul>\n</li>\n<li>平均时间复杂度: <strong>O(n*n)</strong><ul>\n<li>因为往数组中插入一个元素的平均时间复杂度为O(n),而插入排序可以理解为重复n次的数组插入操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>空间复杂度</strong><ul>\n<li><strong>O(1)</strong>：不占用额外的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><ul>\n<li>二分查找的时间复杂度是O(logn)。</li>\n<li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。因此编码的时候，多数采用while循环加break跳出代码结构。</li>\n<li>二分查找处理的原问题必须是有序的。</li>\n</ul>\n<h3 id=\"二叉树搜索\"><a href=\"#二叉树搜索\" class=\"headerlink\" title=\"二叉树搜索\"></a>二叉树搜索</h3><h2 id=\"递归思维\"><a href=\"#递归思维\" class=\"headerlink\" title=\"递归思维\"></a>递归思维</h2><blockquote>\n<p>递归是指在函数的定义中使用函数自身的方法，即自己调用自己。递归的基本思想就是把规模大的问题转化为规模小的相同的子问题来解决。递归的实现包含两部分，一是递归主体，而是终止条件。</p>\n</blockquote>\n<p>递归的数学模型是<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95\" target=\"_blank\" rel=\"noopener\">数学归纳法</a>。当一个问题满足如下的两个条件时，就可以使用递归的方法求解：</p>\n<ul>\n<li>1、可以拆解为除了数据规模之外，求解思路完全相同的方法求解；</li>\n<li>2、存在终止条件。</li>\n</ul>\n<p>递归的核心思想是把规模大的问题转化为规模小的相似的子问题来解决。<br>例子：通过递归求解汉诺塔问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func hannio(n: Int, x: String, y: String, z: String) &#123;</span><br><span class=\"line\">    if n &lt; 1 &#123;</span><br><span class=\"line\">        print(&quot;汉诺塔的层数不能小于1&quot;)</span><br><span class=\"line\">    &#125; else if (n == 1) &#123;</span><br><span class=\"line\">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        hannio(n: n - 1, x: x, y: z, z: y)</span><br><span class=\"line\">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class=\"line\">        hannio(n: n - 1, x: y, y: x, z: z)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><blockquote>\n<p>分治法的核心思想是“分而治之”，就是把一个规模大、高难度的问题，分解为若干个小规模、低难度的小问题，再针对小的问题，逐一击破。</p>\n</blockquote>\n<h3 id=\"分治法的使用方法\"><a href=\"#分治法的使用方法\" class=\"headerlink\" title=\"分治法的使用方法\"></a>分治法的使用方法</h3><p>当使用分治法解决问题时，一般原问题都需要具备以下几个特征：</p>\n<ul>\n<li><strong>1、难度在降低</strong>：即原问题的解决难度，随着数据的规模的缩小而降低。</li>\n<li><strong>2、问题可分</strong>：原问题可以分解为若干个规模较小的同类型问题。</li>\n<li><strong>3、解可合并</strong>：利用所有子问题的解，可合并出原问题的解。</li>\n<li><strong>4、相互独立</strong>：各个子问题之间相互独立，某个子问题的求解不会影响到另一个子问题。如果子问题之间不独立，则分治法需要重复地解决公共的子问题，造成效率低下的结果。</li>\n</ul>\n<p>分治法的常见实例为二分查找。二分查找的步骤如下：</p>\n<ul>\n<li>1、选择一个标志i将集合L分为二个子集，一般为中位数；</li>\n<li>2、判断标志L(i)是否能够与要查找的值des相等，相等则直接返回结果；</li>\n<li>3、如果不相等，需要判断L(i)与des的大小；</li>\n<li>4、基于判断的结果决定下不步是向左查找还是向右查找。如果向某个方向查找的空间为0，则返回结果未找到。</li>\n<li>5、回到步骤1。<br>二分查找最差的情况是找到最后一个数字才完成，那么此时的最大的复杂度为O(logn)。<br>分治法的例子：在有序数组[1,2,3,4,5,6,7,8,9]中查找8有没有出现过：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func findValue(_ list:[Int], _ targrt:Int) -&gt; Bool &#123;</span><br><span class=\"line\">    var middle = 0, low = 0, high = list.count - 1</span><br><span class=\"line\">    var isFind = false</span><br><span class=\"line\">    while (low &lt; high) &#123;</span><br><span class=\"line\">        middle = (high + low) / 2</span><br><span class=\"line\">        if list[middle] == targrt &#123;</span><br><span class=\"line\">            print(String(format: &quot;😄找到了,哈哈哈,index:%@&quot;, String(middle)))</span><br><span class=\"line\">            isFind = true</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125; else if (list[middle] &gt; targrt) &#123;</span><br><span class=\"line\">            // 说明在左侧 low -&gt; middle - 1之间</span><br><span class=\"line\">            high = middle - 1</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // 说明在右侧 middle -&gt; high 之间</span><br><span class=\"line\">            low = middle + 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if !isFind &#123;</span><br><span class=\"line\">        print(&quot;😠没找到，呜呜呜呜&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isFind</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>规律</strong></p>\n<ul>\n<li>二分法查找的时间复杂度是O(logn)，这也是分治法普遍具备的特征。当约束了时间复杂度为O(logn)或O(nlogn)时，可以考虑分治法是否可行。</li>\n<li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。通常采用while循环加break的代码结构</li>\n<li>二分查找处理的原问题必须是有序的。</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><blockquote>\n<p>动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，需要因题而异，仔细分析问题并寻找解决方案。</p>\n</blockquote>\n<h2 id=\"感谢与推荐\"><a href=\"#感谢与推荐\" class=\"headerlink\" title=\"感谢与推荐\"></a>感谢与推荐</h2><ul>\n<li><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185#/content\" target=\"_blank\" rel=\"noopener\">重学数据结构与算法</a></li>\n<li><a href=\"https://greyireland.gitbook.io/algorithm-pattern/\" target=\"_blank\" rel=\"noopener\">algorithm-pattern</a></li>\n<li><a href=\"https://books.halfrost.com/leetcode/\" target=\"_blank\" rel=\"noopener\">冰霜LeetCodeCookBook</a></li>\n<li><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\" target=\"_blank\" rel=\"noopener\">LeetCodeAnimation</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>数据结构是指同一数据对象中各数据元素间存在的关系。算法是解决某一特定类型问题的有限运算序列，算法的实现必须借助程序设计语言中提供的数据类型及其运算。一个算法的效率往往与数据的表现形式有关，因此数据结构的选择对数据处理的效率起着至关重要的作用。</p>\n<h1 id=\"基础入门篇\"><a href=\"#基础入门篇\" class=\"headerlink\" title=\"基础入门篇\"></a>基础入门篇</h1><p>作为一名iOSer，综合考虑了下，决定还是选择Swift作为学习算法的主要语言。一方面有Swift语言基础，能够减少算法学习的前期准备成本，另一方面，通过算法的练习，提升对Swift语言的熟练度。</p>\n<h2 id=\"Swift语言入门\"><a href=\"#Swift语言入门\" class=\"headerlink\" title=\"Swift语言入门\"></a>Swift语言入门</h2><p><strong>基础语法</strong></p>\n<p><a href=\"https://swiftgg.gitbook.io/swift/\" target=\"_blank\" rel=\"noopener\">SwiftGG-The Swift Programming Language</a></p>\n<h1 id=\"数据结构篇\"><a href=\"#数据结构篇\" class=\"headerlink\" title=\"数据结构篇\"></a>数据结构篇</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><p>数组是最基本的数据结构，可以在内存中连续存储多个相同元素，在内存中的分配也是连续的，数组中的元素通过下标进行访问，下标从0开始。在Swift中，将OC时代的NSMutableArray和NSArray统一归为Array。虽然看上去只有一种数据结构，但是它的实现其实有三种：</p>\n<ul>\n<li><p><strong>ContiguousArray<element></element></strong>：是一个比较特殊的数组，会将对应的数组存储在连续的内存区域中。如果存储的元素是结构体或枚举（值类型，栈上操作），那么<code>Array</code>和<code>ContiguousArray</code>的效率相似；如果数组中存储的元素是对象（<code>class</code>或<code>@objc</code>），而且不需要将数组桥接到Array或者传递给<code>Objective-C</code>的<code>API</code>时，那么<code>ContiguousArray</code>比<code>Array</code>更高效，而且拥有更多可预测的性能。</p>\n</li>\n<li><p><strong>Array<element></element></strong>：当存储值类型时，性能和<code>ContiguousArray</code>无差别，而且内存是连续的。但是如果存储的是对象（<code>class</code>或<code>@objc</code>），则会自动桥接到<code>Objective-C</code>中的<code>NSArray</code>。</p>\n</li>\n<li><p><strong>ArraySlice<element></element></strong>：不是数组，而是数组片段，与原数组享用同一区域，不创建新的存储空间。但是，修改ArraySlice中的元素时，不会影响到原数组。</p>\n</li>\n</ul>\n<h3 id=\"数组中的count和capacity\"><a href=\"#数组中的count和capacity\" class=\"headerlink\" title=\"数组中的count和capacity\"></a>数组中的count和capacity</h3><p>Swift中Array的count属性用于描述数组中元素的个数，而capacity用于描述数组的容量，即不分配新存储空间的数组可以包含的元素总数。如果要向数组中增加元素，并且超过其容量，则该数组必须增加其容量。为了提高数组的扩容效率，数组的容量的大小都是成倍增长，如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class=\"line\">print(cArr.count)       // 2</span><br><span class=\"line\">print(cArr.capacity)    // 2</span><br><span class=\"line\">cArr.append(1)</span><br><span class=\"line\">print(cArr.capacity)    // 4</span><br><span class=\"line\">cArr.append(2)</span><br><span class=\"line\">print(cArr.capacity)    // 4</span><br><span class=\"line\">cArr.append(3)</span><br><span class=\"line\">print(cArr.capacity)    // 8        </span><br><span class=\"line\">// 当调用removeAll时，数组的所有空间被释放</span><br><span class=\"line\">cArr.removeAll()</span><br><span class=\"line\">print(cArr.count)       // 0</span><br><span class=\"line\">print(cArr.capacity)    // 0</span><br></pre></td></tr></table></figure>\n<p>由于Swift数组将其元素连续存储在内存中，因此必须通过通过重新分配其内部存储，并且将所有元素从原先的存储中复制到新的存储中。如果事先知道需要向数组汇总添加多少个元素，则可使用<code>reserveCapacity</code>方法来预设数组中的容量，以减少数组<code>capacity</code>变化带来的影响。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var cArr = ContiguousArray&lt;Any&gt;(repeating: 3, count: 2)</span><br><span class=\"line\">cArr.reserveCapacity(10) // 10</span><br></pre></td></tr></table></figure>\n<p>通常无需担心数组容量的问题，重新分配很少影响性能问题，Swift使用有效的重新分配方式，以便重新分配的数组在最终计数中为对数。但是如果数组非常大（例如，Mac上为千兆字节或iOS设备上为数十兆字节），或者对性能敏感的数据存入数组（音频缓冲区，需要几秒内播放），则需要考虑使用reserveCapacity避免重新分配。</p>\n<h4 id=\"ArraySlice注意点\"><a href=\"#ArraySlice注意点\" class=\"headerlink\" title=\"ArraySlice注意点\"></a>ArraySlice注意点</h4><p>ArraySlice是Array，ContiguousArray的一个切片或ArraySlice实例。ArraySlice并没有将切片的元素拷贝到新的内存中。修改ArraySlice中的值不会引起原数组的改变，同样，原数组的值修改，也不会引起ArraySlice的变化。如：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let testArr = Array(1...7)</span><br><span class=\"line\">let middle = testArr.count / 2</span><br><span class=\"line\">var firstHalf = testArr[..&lt;middle]</span><br><span class=\"line\">let secondHalf = testArr[middle...]</span><br><span class=\"line\">firstHalf[0] = 10</span><br><span class=\"line\">print(secondHalf.startIndex) // 3</span><br><span class=\"line\">print(testArr)               // [1, 2, 3, 4, 5, 6, 7]</span><br><span class=\"line\">print(firstHalf)             // [10, 2, 3]</span><br><span class=\"line\">testArr[0] = 20</span><br><span class=\"line\">print(firstHalf)             // [10, 2, 3]</span><br><span class=\"line\">print(testArr)               // [20, 2, 3, 4, 5, 6, 7]</span><br></pre></td></tr></table></figure>\n<p>ArraySlice的索引并总是从0开始,而是按照原数据中的索引。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(secondHalf.startIndex) // 3</span><br><span class=\"line\">print(secondHalf[0])  // Fatal error: Index out of bounds</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Apple官方文档中指出不建议长期存储实例。因为即使原始数组的生命周期结束后，切片也会保留对较大数组整个存储的引用，而不仅仅是对其呈现的部分的引用。因此，切片的长期存储可能会延长原本无法访问的元素的寿命，这些元素似乎是内存和对象泄漏。</p>\n</blockquote>\n<h3 id=\"数组中的常见操作\"><a href=\"#数组中的常见操作\" class=\"headerlink\" title=\"数组中的常见操作\"></a>数组中的常见操作</h3><ul>\n<li><p>数组的声明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 声明一个可变数组</span><br><span class=\"line\">var arr1 = Array&lt;Int&gt;()</span><br><span class=\"line\">var arr2 = [Int]()    //推荐使用</span><br><span class=\"line\">// 声明一个不可修改的数组</span><br><span class=\"line\">let arr3 = [1,2,3]</span><br><span class=\"line\">let arr4 = [Int](repeating: 0, count: 3)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>增加一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.append(1)</span><br><span class=\"line\">或</span><br><span class=\"line\">arr1 += [1]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.remove(at: 0)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>修改一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1[1] = 6</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>取出一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value = arr1[0]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>遍历</p>\n</li>\n</ul>\n<p>常用方式一：<strong>forEach</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.forEach &#123; (value) in</span><br><span class=\"line\">    print(value)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>常用方式二：<strong>for…in</strong><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> </span><br><span class=\"line\">for i in 0..&lt;arr1.count - 1 &#123;</span><br><span class=\"line\">    print(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 枚举遍历</span><br><span class=\"line\">for (index, value) in arr1.enumerated() &#123;</span><br><span class=\"line\">    print(&quot;\\(index): &apos;\\(value)&apos;&quot;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>区别：</p>\n<h2 id=\"字典与集合\"><a href=\"#字典与集合\" class=\"headerlink\" title=\"字典与集合\"></a>字典与集合</h2><h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h2 id=\"栈和队列\"><a href=\"#栈和队列\" class=\"headerlink\" title=\"栈和队列\"></a>栈和队列</h2><h2 id=\"链表\"><a href=\"#链表\" class=\"headerlink\" title=\"链表\"></a>链表</h2><h2 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h2><h1 id=\"基础算法篇\"><a href=\"#基础算法篇\" class=\"headerlink\" title=\"基础算法篇\"></a>基础算法篇</h1><p>二分查找，排序算法， 动态规划</p>\n<h1 id=\"算法思维篇\"><a href=\"#算法思维篇\" class=\"headerlink\" title=\"算法思维篇\"></a>算法思维篇</h1><p>数据结构和算法思维的目的都是为了降低时间复杂度。数据结构是从数据组织形式的角度去达成这个目标，而算法思维则是从数据处理的思路上去达成这个目标。如果数据处理的逻辑上出现缺陷，即使通过高效的数据处理解决了问题，但是会产生很多无效的计算，造成时间浪费。</p>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><blockquote>\n<p>排序是指让一组无序数据变成有序的过程，一般默认有序为从小到大的排列顺序。</p>\n</blockquote>\n<p><strong>衡量排序算法优劣的方式</strong></p>\n<ul>\n<li>时间复杂度<ul>\n<li>包括最好时间复杂度、最坏时间复杂度和平均时间复杂度。</li>\n</ul>\n</li>\n<li>空间复杂度<ul>\n<li>如果空间复杂度为1，也称为原地排序。</li>\n</ul>\n</li>\n<li>稳定性<ul>\n<li>指相等的数据对象，在排序后，顺序是否保持不变。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h3><p><strong>原理</strong><br>从第一个数据开始，依次比较相邻元素的大小，如果前者大于后者，这交换两个元素的位置，将大的元素排到后面，通过多轮迭代，直到不用交换为止。</p>\n<p><strong>性能</strong></p>\n<ul>\n<li><strong>时间复杂度</strong><ul>\n<li>最好时间复杂度：<strong>O(n)</strong><ul>\n<li>即当数据刚好是顺序排序时，只要挨个比较一般即可。</li>\n</ul>\n</li>\n<li>最坏时间复杂度：<strong>O(n*n)</strong><ul>\n<li>即当数据刚好逆序时，每轮排序都需要比较n次，并且重复n次。</li>\n</ul>\n</li>\n<li>平均时间复杂度: <strong>O(n*n)</strong><ul>\n<li>即数据杂乱无章时</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>空间复杂度</strong><ul>\n<li><strong>O(1)</strong>：不占用额外的空间</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码实现</strong><br>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 冒泡排序(Swift)</span><br><span class=\"line\">func bubbleSort() &#123;</span><br><span class=\"line\">    var list = [-1,2,4,1,0,9,6,7]</span><br><span class=\"line\">    for i in 1..&lt;list.count &#123;</span><br><span class=\"line\">        for j in 0..&lt;(i - 1) &#123;</span><br><span class=\"line\">            if list[j] &gt; list[j + 1] &#123;</span><br><span class=\"line\">                let temp = list[j]</span><br><span class=\"line\">                list[j] = list[j + 1]</span><br><span class=\"line\">                list[j+1] = temp</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    print(list)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h3><p><strong>原理</strong><br>选取未排序的数据插入到已排序区间的合适位置，直到未排序区间为空。</p>\n<p><strong>性能</strong></p>\n<ul>\n<li><strong>时间复杂度</strong><ul>\n<li>最好时间复杂度：<strong>O(n)</strong><ul>\n<li>即当数据刚好是顺序排序时，每次只用比较一次就能找到正确的位置。</li>\n</ul>\n</li>\n<li>最坏时间复杂度：<strong>O(n*n)</strong><ul>\n<li>即当数据刚好完全逆序时，每轮排序都需要比较n次才能找到正确的位置区间。</li>\n</ul>\n</li>\n<li>平均时间复杂度: <strong>O(n*n)</strong><ul>\n<li>因为往数组中插入一个元素的平均时间复杂度为O(n),而插入排序可以理解为重复n次的数组插入操作</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>空间复杂度</strong><ul>\n<li><strong>O(1)</strong>：不占用额外的空间。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查找\"><a href=\"#查找\" class=\"headerlink\" title=\"查找\"></a>查找</h2><h3 id=\"二分查找\"><a href=\"#二分查找\" class=\"headerlink\" title=\"二分查找\"></a>二分查找</h3><ul>\n<li>二分查找的时间复杂度是O(logn)。</li>\n<li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。因此编码的时候，多数采用while循环加break跳出代码结构。</li>\n<li>二分查找处理的原问题必须是有序的。</li>\n</ul>\n<h3 id=\"二叉树搜索\"><a href=\"#二叉树搜索\" class=\"headerlink\" title=\"二叉树搜索\"></a>二叉树搜索</h3><h2 id=\"递归思维\"><a href=\"#递归思维\" class=\"headerlink\" title=\"递归思维\"></a>递归思维</h2><blockquote>\n<p>递归是指在函数的定义中使用函数自身的方法，即自己调用自己。递归的基本思想就是把规模大的问题转化为规模小的相同的子问题来解决。递归的实现包含两部分，一是递归主体，而是终止条件。</p>\n</blockquote>\n<p>递归的数学模型是<a href=\"https://zh.wikipedia.org/wiki/%E6%95%B0%E5%AD%A6%E5%BD%92%E7%BA%B3%E6%B3%95\" target=\"_blank\" rel=\"noopener\">数学归纳法</a>。当一个问题满足如下的两个条件时，就可以使用递归的方法求解：</p>\n<ul>\n<li>1、可以拆解为除了数据规模之外，求解思路完全相同的方法求解；</li>\n<li>2、存在终止条件。</li>\n</ul>\n<p>递归的核心思想是把规模大的问题转化为规模小的相似的子问题来解决。<br>例子：通过递归求解汉诺塔问题：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func hannio(n: Int, x: String, y: String, z: String) &#123;</span><br><span class=\"line\">    if n &lt; 1 &#123;</span><br><span class=\"line\">        print(&quot;汉诺塔的层数不能小于1&quot;)</span><br><span class=\"line\">    &#125; else if (n == 1) &#123;</span><br><span class=\"line\">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    else &#123;</span><br><span class=\"line\">        hannio(n: n - 1, x: x, y: z, z: y)</span><br><span class=\"line\">        print(&quot;移动：&quot; + x + &quot;-&gt;&quot; + z)</span><br><span class=\"line\">        hannio(n: n - 1, x: y, y: x, z: z)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"分治法\"><a href=\"#分治法\" class=\"headerlink\" title=\"分治法\"></a>分治法</h2><blockquote>\n<p>分治法的核心思想是“分而治之”，就是把一个规模大、高难度的问题，分解为若干个小规模、低难度的小问题，再针对小的问题，逐一击破。</p>\n</blockquote>\n<h3 id=\"分治法的使用方法\"><a href=\"#分治法的使用方法\" class=\"headerlink\" title=\"分治法的使用方法\"></a>分治法的使用方法</h3><p>当使用分治法解决问题时，一般原问题都需要具备以下几个特征：</p>\n<ul>\n<li><strong>1、难度在降低</strong>：即原问题的解决难度，随着数据的规模的缩小而降低。</li>\n<li><strong>2、问题可分</strong>：原问题可以分解为若干个规模较小的同类型问题。</li>\n<li><strong>3、解可合并</strong>：利用所有子问题的解，可合并出原问题的解。</li>\n<li><strong>4、相互独立</strong>：各个子问题之间相互独立，某个子问题的求解不会影响到另一个子问题。如果子问题之间不独立，则分治法需要重复地解决公共的子问题，造成效率低下的结果。</li>\n</ul>\n<p>分治法的常见实例为二分查找。二分查找的步骤如下：</p>\n<ul>\n<li>1、选择一个标志i将集合L分为二个子集，一般为中位数；</li>\n<li>2、判断标志L(i)是否能够与要查找的值des相等，相等则直接返回结果；</li>\n<li>3、如果不相等，需要判断L(i)与des的大小；</li>\n<li>4、基于判断的结果决定下不步是向左查找还是向右查找。如果向某个方向查找的空间为0，则返回结果未找到。</li>\n<li>5、回到步骤1。<br>二分查找最差的情况是找到最后一个数字才完成，那么此时的最大的复杂度为O(logn)。<br>分治法的例子：在有序数组[1,2,3,4,5,6,7,8,9]中查找8有没有出现过：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func findValue(_ list:[Int], _ targrt:Int) -&gt; Bool &#123;</span><br><span class=\"line\">    var middle = 0, low = 0, high = list.count - 1</span><br><span class=\"line\">    var isFind = false</span><br><span class=\"line\">    while (low &lt; high) &#123;</span><br><span class=\"line\">        middle = (high + low) / 2</span><br><span class=\"line\">        if list[middle] == targrt &#123;</span><br><span class=\"line\">            print(String(format: &quot;😄找到了,哈哈哈,index:%@&quot;, String(middle)))</span><br><span class=\"line\">            isFind = true</span><br><span class=\"line\">            break</span><br><span class=\"line\">        &#125; else if (list[middle] &gt; targrt) &#123;</span><br><span class=\"line\">            // 说明在左侧 low -&gt; middle - 1之间</span><br><span class=\"line\">            high = middle - 1</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            // 说明在右侧 middle -&gt; high 之间</span><br><span class=\"line\">            low = middle + 1</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if !isFind &#123;</span><br><span class=\"line\">        print(&quot;😠没找到，呜呜呜呜&quot;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return isFind</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>规律</strong></p>\n<ul>\n<li>二分法查找的时间复杂度是O(logn)，这也是分治法普遍具备的特征。当约束了时间复杂度为O(logn)或O(nlogn)时，可以考虑分治法是否可行。</li>\n<li>二分查找的循环次数并不确定。一般是达到某个条件就跳出循环。通常采用while循环加break的代码结构</li>\n<li>二分查找处理的原问题必须是有序的。</li>\n</ul>\n<h2 id=\"动态规划\"><a href=\"#动态规划\" class=\"headerlink\" title=\"动态规划\"></a>动态规划</h2><blockquote>\n<p>动态规划问题之所以难，是因为动态规划的解题方法并没有那么标准化，需要因题而异，仔细分析问题并寻找解决方案。</p>\n</blockquote>\n<h2 id=\"感谢与推荐\"><a href=\"#感谢与推荐\" class=\"headerlink\" title=\"感谢与推荐\"></a>感谢与推荐</h2><ul>\n<li><a href=\"https://kaiwu.lagou.com/course/courseInfo.htm?courseId=185#/content\" target=\"_blank\" rel=\"noopener\">重学数据结构与算法</a></li>\n<li><a href=\"https://greyireland.gitbook.io/algorithm-pattern/\" target=\"_blank\" rel=\"noopener\">algorithm-pattern</a></li>\n<li><a href=\"https://books.halfrost.com/leetcode/\" target=\"_blank\" rel=\"noopener\">冰霜LeetCodeCookBook</a></li>\n<li><a href=\"https://github.com/MisterBooo/LeetCodeAnimation\" target=\"_blank\" rel=\"noopener\">LeetCodeAnimation</a></li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckf0ic1yw0000n6vcgb7tykmh","category_id":"ckf0ic1z50001n6vchcmijfbu","_id":"ckf0ic1z80004n6vcu8sfed9d"},{"post_id":"ckf0ic20e0007n6vcqdstjcfi","category_id":"ckf0ic20j000bn6vcty661ete","_id":"ckf0ic20o000hn6vc037gfwb8"}],"PostTag":[{"post_id":"ckf0ic1yw0000n6vcgb7tykmh","tag_id":"ckf0ic1z70002n6vck8xyn5hg","_id":"ckf0ic1z70003n6vcib6fj1xb"},{"post_id":"ckf0ic20e0007n6vcqdstjcfi","tag_id":"ckf0ic20k000cn6vcf0oye428","_id":"ckf0ic20n000gn6vc507lsuh4"},{"post_id":"ckf0ic218000in6vc0c587xiy","tag_id":"ckf0ic20k000cn6vcf0oye428","_id":"ckf0ic21a000jn6vc1ggezxcu"}],"Tag":[{"name":"Xcode iOS","_id":"ckf0ic1z70002n6vck8xyn5hg"},{"name":"数据结构与算法","_id":"ckf0ic20k000cn6vcf0oye428"}]}}